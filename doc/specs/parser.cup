package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}


// Declaracion de terminales

terminal Token ALMOHADILLA;
terminal Token CONSTANTE;
terminal Token PUNTO_COMA;
terminal Token ENTERO;
terminal Token VACIO;
terminal Token TIPO;
terminal Token COMA;
terminal Token ASIGNACION;
terminal Token PRINCIPAL;
terminal Token LLAVE_ABRIR;
terminal Token LLAVE_CERRAR;

terminal Token ID;
terminal Token INT;

terminal Token PARENTESIS_ABRIR;
terminal Token PARENTESIS_CERRAR;
terminal Token CORCHETE_ABRIR;
terminal Token CORCHETE_CERRAR;
terminal Token AUTOINCREMENTO;
terminal Token NEGACION;
terminal Token PRODUCTO;
terminal Token SUMA;
terminal Token MENOR;
terminal Token IGUAL;
terminal Token CONJUNCION;


// ...


// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
non terminal			declaracionConstantes;
non terminal			declaracionConstante;
non terminal			declaracionTipos;
non terminal			declaracionTipo;
non terminal			tamanhoTipo;
non terminal			declaracionVariables;
non terminal			declaracionVariable;
non terminal			listadoIds;		
non terminal			declaracionSubprogramas;
non terminal			declaracionSubprograma;
non terminal			funcionPrincipal;
non terminal			parametrosFormales;
non terminal			listaParametros;
non terminal			bloqueFuncion;
// ...


// Declaracion de relaciones de precedencia

precedence left     PARENTESIS_ABRIR;
precedence left     PARENTESIS_CERRAR;
precedence left     CORCHETE_ABRIR;
precedence left     CORCHETE_CERRAR;
precedence left		AUTOINCREMENTO;
precedence left     NEGACION;
precedence left     PRODUCTO;
precedence left     SUMA;
precedence left     MENOR;
precedence left    	IGUAL;
precedence left 	CONJUNCION;


// Declaracion de reglas de produccion

start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


	// 1. Constantes
	// 2. Tipos
	// 3. Variables
	axiom ::= declaracionConstantes declaracionTipos declaracionVariables declaracionSubprogramas
			| declaracionConstantes declaracionTipos declaracionSubprogramas;
	declaracionConstantes ::= declaracionConstante declaracionConstantes | ;
	declaracionConstante ::= ALMOHADILLA CONSTANTE ID INT PUNTO_COMA;
	declaracionTipos ::= declaracionTipo declaracionTipos | ;
	declaracionTipo ::= TIPO ENTERO ID CORCHETE_ABRIR tamanhoTipo CORCHETE_CERRAR PUNTO_COMA;
	tamanhoTipo ::= ID | INT;
	declaracionVariables ::= declaracionVariables declaracionVariable | declaracionVariable;
	declaracionVariable ::= ID listadoIds PUNTO_COMA | ENTERO listadoIds PUNTO_COMA;
	listadoIds ::= ID | ID COMA listadoIds | ID ASIGNACION INT | ID ASIGNACION INT COMA listadoIds;
	declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas | funcionPrincipal;
	declaracionSubprograma ::= ENTERO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR
							| VACIO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR;
	funcionPrincipal ::= VACIO PRINCIPAL PARENTESIS_ABRIR PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR;
	parametrosFormales ::= listaParametros | ;
	listaParametros ::= declaracionParametro | listaParametros COMA declaracionParametro;
	declaracionParametro ::= ENTERO ID;
	bloqueFuncion ::= ;