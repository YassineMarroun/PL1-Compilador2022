package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}


// Declaracion de terminales

terminal Token ALMOHADILLA;
terminal Token CONSTANTE;
terminal Token PUNTO_COMA;
terminal Token TIPO;
terminal Token ENTERO;
terminal Token CORCHETE_ABRIR;
terminal Token CORCHETE_CERRAR;
terminal Token COMA;
terminal Token ASIGNACION;
terminal Token PARENTESIS_ABRIR;
terminal Token PARENTESIS_CERRAR;
terminal Token LLAVE_ABRIR;
terminal Token LLAVE_CERRAR;
terminal Token VACIO;
terminal Token PRINCIPAL;
terminal Token SUMA;
terminal Token PRODUCTO;
terminal Token IGUAL;
terminal Token MENOR;
terminal Token CONJUNCION;
terminal Token NEGACION;
terminal Token AUTOINCREMENTO;
terminal Token ESCRIBE;
terminal Token ESCRIBE_ENT;
terminal Token ASIGNACION_SUMA;
terminal Token SI;
terminal Token SINO;
terminal Token ALTERNATIVAS;
terminal Token CASO;
terminal Token DOS_PUNTOS;
terminal Token CORTE;
terminal Token PORDEFECTO;
terminal Token MIENTRAS;
//terminal Token DEVUELVE;

terminal Token ID;
terminal Token INT;
terminal Token STRING;


// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
non terminal			declaracionConstantes;
non terminal			declaracionTipos;
non terminal			declaracionVariables;
non terminal			declaracionSubprogramas;
non terminal			declaracionConstante;
non terminal			declaracionTipo;
non terminal			tamanhoTipo;
non terminal			declaracionVariable;
non terminal			listadoIds;	
non terminal			declaracionSubprograma;
non terminal			funcionPrincipal;
non terminal			parametrosFormales;
non terminal			bloqueFuncion;
non terminal			listaParametros;
non terminal			declaracionParametro;
non terminal			sentencias;
non terminal			sentencia;
non terminal			sentenciaAsignacion;
non terminal			sentenciaSalida;
non terminal			sentenciaSi;
non terminal			sentenciaAlternativas;
non terminal			sentenciaLlamadaFuncion;
non terminal			sentenciaMientras;
non terminal			bloqueSentencia;
non terminal			sentenciaBloque;	
non terminal			expresion;
non terminal			expresionAutoincremento;
non terminal			llamadaProcedimientos;
non terminal			expresionVector;
non terminal			expresionAritmetica;
non terminal			parametros;
non terminal			referencia;
non terminal			parteElse;
non terminal			casosAlternativa;
non terminal			defectoAlternativa;
non terminal			casoAlternativa;


// Declaracion de relaciones de precedencia

precedence left     PARENTESIS_ABRIR;
precedence left     PARENTESIS_CERRAR;
precedence left     CORCHETE_ABRIR;
precedence left     CORCHETE_CERRAR;
precedence left		AUTOINCREMENTO;
precedence left     NEGACION;
precedence left     PRODUCTO;
precedence left     SUMA;
precedence left     MENOR;
precedence left    	IGUAL;
precedence left 	CONJUNCION;
precedence right	SI;
precedence right	SINO;


// Declaracion de reglas de produccion

start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


	axiom ::= declaracionConstantes declaracionTipos declaracionVariables declaracionSubprogramas
			| declaracionConstantes declaracionTipos declaracionSubprogramas;
	// 1. Constantes
	// 2. Tipos
	// 3. Variables
	declaracionConstantes ::= declaracionConstante declaracionConstantes | ;
	declaracionConstante ::= ALMOHADILLA CONSTANTE ID INT PUNTO_COMA;
	declaracionTipos ::= declaracionTipo declaracionTipos | ;
	declaracionTipo ::= TIPO ENTERO ID CORCHETE_ABRIR tamanhoTipo CORCHETE_CERRAR PUNTO_COMA;
	tamanhoTipo ::= ID | INT;
	declaracionVariables ::= declaracionVariables declaracionVariable | declaracionVariable;
	declaracionVariable ::= ID listadoIds PUNTO_COMA | ENTERO listadoIds PUNTO_COMA;
	listadoIds ::= ID | ID COMA listadoIds | ID ASIGNACION INT | ID ASIGNACION INT COMA listadoIds;
	// 4. Funciones
	// 5. Sentencias
	// 6. Expresiones
	declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas | funcionPrincipal;
	declaracionSubprograma ::= ENTERO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR
							| VACIO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR;
	funcionPrincipal ::= VACIO PRINCIPAL PARENTESIS_ABRIR PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR;
	parametrosFormales ::= listaParametros | ;
	listaParametros ::= declaracionParametro | listaParametros COMA declaracionParametro;
	declaracionParametro ::= ENTERO ID;
	bloqueFuncion ::= declaracionTipos declaracionVariables sentencias | declaracionTipos sentencias;
	sentencias ::= sentencias sentencia | sentencia;	
	sentencia ::= sentenciaAsignacion | sentenciaSalida | sentenciaSi | sentenciaAlternativas
				| sentenciaLlamadaFuncion | sentenciaMientras | bloqueSentencia;
	bloqueSentencia ::= LLAVE_ABRIR declaracionVariables sentenciaBloque LLAVE_CERRAR | LLAVE_ABRIR sentenciaBloque LLAVE_CERRAR;
	sentenciaBloque ::= sentenciaBloque sentencia | sentencia;
	expresion ::= expresion SUMA expresion | expresion PRODUCTO expresion | expresionAutoincremento
				| expresion IGUAL expresion | expresion MENOR expresion | expresion CONJUNCION expresion
				| NEGACION expresion | PARENTESIS_ABRIR expresion PARENTESIS_CERRAR | llamadaProcedimientos
				| expresionVector | ID | INT;
	expresionAutoincremento ::= ID AUTOINCREMENTO | expresionVector AUTOINCREMENTO;
	expresionVector ::= ID CORCHETE_ABRIR expresionAritmetica CORCHETE_CERRAR;
	llamadaProcedimientos ::= ID PARENTESIS_ABRIR parametros PARENTESIS_CERRAR | ID PARENTESIS_ABRIR PARENTESIS_CERRAR;
	parametros ::= expresion | expresion COMA parametros;
	sentenciaSalida ::= ESCRIBE PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA
					| ESCRIBE PARENTESIS_ABRIR STRING PARENTESIS_CERRAR PUNTO_COMA
					| ESCRIBE_ENT PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA
					| ESCRIBE_ENT PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR PUNTO_COMA;
	expresionAritmetica ::= expresionAritmetica SUMA expresionAritmetica | expresionAritmetica PRODUCTO expresionAritmetica
						| expresionAritmetica AUTOINCREMENTO | PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR
						| llamadaProcedimientos | expresionVector | ID | INT;
	sentenciaAsignacion ::= referencia ASIGNACION expresion PUNTO_COMA | referencia ASIGNACION_SUMA expresion PUNTO_COMA;
	referencia ::= ID | expresionVector;
	// 7. Si - Sino
	// 8. Alternativas
	// 9. Mientras
	sentenciaSi ::= SI PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia parteElse;
	parteElse ::= SINO sentencia | ;
	sentenciaAlternativas ::= ALTERNATIVAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR LLAVE_ABRIR casosAlternativa defectoAlternativa LLAVE_CERRAR;
	casosAlternativa ::= casosAlternativa casoAlternativa | casoAlternativa;
	casoAlternativa ::= CASO INT DOS_PUNTOS sentencias CORTE DOS_PUNTOS;
	defectoAlternativa ::= PORDEFECTO sentencias CORTE DOS_PUNTOS | ;
	sentenciaLLamadaFuncion ::= llamadaProcedimientos PUNTO_COMA;
	sentenciaMientras ::= MIENTRAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia;
