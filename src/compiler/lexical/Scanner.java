/* The following code was generated by JFlex 1.4.1 on 01.01.2022, 02:46 */

package compiler.lexical;

import compiler.syntax.sym;
import compiler.lexical.Token;
import es.uned.lsi.compiler.lexical.ScannerIF;
import es.uned.lsi.compiler.lexical.LexicalError;
import es.uned.lsi.compiler.lexical.LexicalErrorManager;

// incluir aqui, si es necesario otras importaciones


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 01.01.2022, 02:46 from the specification file
 * <tt>C:/Users/yasma2/OneDrive - UNED/.ProyectosGITHUB/PL1 - Compilador2022/ArquitecturaPLI-2021-2022/doc/specs/scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner, ScannerIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\0\2\1\22\0\1\1\1\47\1\7\1\52"+
    "\2\0\1\46\1\40\1\34\1\35\1\12\1\43\1\56\1\0\1\55"+
    "\1\11\12\5\1\42\1\41\1\44\1\45\3\0\4\6\1\23\10\6"+
    "\1\24\5\6\1\25\6\6\1\36\1\0\1\37\3\0\1\14\1\22"+
    "\1\13\1\32\1\20\1\2\1\53\1\6\1\3\2\6\1\26\1\30"+
    "\1\4\1\16\1\31\1\6\1\21\1\15\1\17\1\33\1\27\3\6"+
    "\1\54\1\50\1\0\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\2\1\1\5\13\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\3\1\0\1\26\1\0\4\3\1\27\2\3"+
    "\1\30\11\3\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\3\1\0\16\3\1\37\11\3\1\2\1\3\1\40"+
    "\4\3\1\41\1\3\1\42\11\3\1\43\5\3\1\44"+
    "\3\3\1\45\3\3\1\46\3\3\1\47\1\3\1\50"+
    "\11\3\1\51\5\3\1\52\3\3\1\53\6\3\1\54"+
    "\5\3\1\55\11\3\1\56\2\3\1\57\1\3\1\60"+
    "\1\3\1\61\3\3\1\62\1\63\1\64\3\3\1\65"+
    "\1\3\1\66\1\3\1\67\2\3\1\70\1\71\4\3"+
    "\1\72\1\73\1\3\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\353\0\u011a"+
    "\0\57\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\u034e\0\57\0\u037d\0\u03ac\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\u03db\0\u040a\0\u0439"+
    "\0\353\0\353\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\57\0\57\0\57"+
    "\0\57\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0468\0\u0d09\0\215"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\215\0\u0df4\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\215\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\215\0\u10e4"+
    "\0\u1113\0\u1142\0\215\0\u1171\0\u11a0\0\u11cf\0\215\0\u11fe"+
    "\0\u122d\0\u125c\0\215\0\u128b\0\215\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\215\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\215\0\u154c\0\u157b\0\u15aa"+
    "\0\215\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\215"+
    "\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c"+
    "\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\215"+
    "\0\u19b4\0\u19e3\0\215\0\u1a12\0\215\0\u1a41\0\215\0\u1a70"+
    "\0\u1a9f\0\u1ace\0\215\0\215\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\215\0\u1bb9\0\215\0\u1be8\0\215\0\u1c17\0\u1c46\0\215"+
    "\0\215\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\215\0\215\0\u1d31"+
    "\0\215";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\5\1\7\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\5\1\15\1\16"+
    "\1\17\1\20\4\5\1\21\1\22\1\23\1\24\1\5"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\5"+
    "\1\44\1\45\61\0\1\5\1\46\3\5\4\0\1\5"+
    "\1\47\16\5\1\50\17\0\2\5\4\0\5\5\4\0"+
    "\21\5\17\0\2\5\7\0\1\6\51\0\7\51\1\52"+
    "\1\0\46\51\12\0\1\53\46\0\1\5\1\54\3\5"+
    "\4\0\1\5\1\55\1\5\1\56\15\5\17\0\2\5"+
    "\4\0\5\5\4\0\13\5\1\57\5\5\17\0\2\5"+
    "\4\0\1\5\1\60\3\5\4\0\20\5\1\61\17\0"+
    "\2\5\4\0\1\5\1\62\3\5\4\0\21\5\17\0"+
    "\2\5\4\0\2\5\1\63\2\5\4\0\2\5\1\64"+
    "\16\5\17\0\2\5\4\0\5\5\4\0\1\5\1\65"+
    "\17\5\17\0\2\5\4\0\5\5\4\0\3\5\1\66"+
    "\15\5\17\0\2\5\4\0\5\5\4\0\1\5\1\67"+
    "\3\5\1\70\13\5\17\0\2\5\4\0\1\5\1\71"+
    "\3\5\4\0\21\5\17\0\2\5\4\0\5\5\4\0"+
    "\1\5\1\72\1\5\1\73\2\5\1\74\12\5\17\0"+
    "\2\5\4\0\5\5\4\0\5\5\1\75\13\5\17\0"+
    "\2\5\45\0\1\76\1\0\1\77\56\0\1\100\57\0"+
    "\1\101\12\0\2\5\1\102\2\5\4\0\21\5\17\0"+
    "\2\5\4\0\5\5\4\0\13\5\1\103\5\5\17\0"+
    "\2\5\4\0\2\5\1\104\2\5\4\0\21\5\17\0"+
    "\2\5\2\0\7\53\1\0\2\53\1\105\44\53\2\0"+
    "\5\5\4\0\5\5\1\106\13\5\17\0\2\5\4\0"+
    "\5\5\4\0\2\5\1\107\16\5\17\0\2\5\4\0"+
    "\2\5\1\110\2\5\4\0\6\5\1\111\6\5\1\112"+
    "\3\5\17\0\2\5\4\0\5\5\4\0\4\5\1\113"+
    "\14\5\17\0\2\5\4\0\2\5\1\114\2\5\4\0"+
    "\21\5\17\0\2\5\4\0\5\5\4\0\7\5\1\115"+
    "\11\5\17\0\2\5\4\0\5\5\4\0\16\5\1\116"+
    "\2\5\17\0\2\5\4\0\5\5\4\0\4\5\1\117"+
    "\14\5\17\0\2\5\4\0\5\5\4\0\1\120\20\5"+
    "\17\0\2\5\4\0\2\5\1\121\2\5\4\0\21\5"+
    "\17\0\2\5\4\0\5\5\4\0\3\5\1\122\15\5"+
    "\17\0\2\5\4\0\5\5\4\0\1\123\5\5\1\124"+
    "\12\5\17\0\2\5\4\0\5\5\4\0\1\125\20\5"+
    "\17\0\2\5\4\0\5\5\4\0\5\5\1\126\13\5"+
    "\17\0\2\5\4\0\5\5\4\0\6\5\1\127\12\5"+
    "\17\0\2\5\4\0\5\5\4\0\6\5\1\130\12\5"+
    "\17\0\2\5\4\0\1\5\1\131\3\5\4\0\3\5"+
    "\1\132\15\5\17\0\2\5\4\0\5\5\4\0\14\5"+
    "\1\133\4\5\17\0\2\5\3\0\1\3\5\5\1\0"+
    "\1\3\2\0\21\5\17\0\2\5\4\0\5\5\4\0"+
    "\2\5\1\134\16\5\17\0\2\5\4\0\5\5\4\0"+
    "\1\135\20\5\17\0\2\5\2\0\7\53\1\0\1\53"+
    "\1\136\1\105\44\53\2\0\5\5\4\0\6\5\1\137"+
    "\12\5\17\0\2\5\4\0\5\5\4\0\3\5\1\140"+
    "\15\5\17\0\2\5\4\0\5\5\4\0\2\5\1\141"+
    "\16\5\17\0\2\5\4\0\5\5\4\0\4\5\1\142"+
    "\14\5\17\0\2\5\4\0\1\5\1\143\3\5\4\0"+
    "\21\5\17\0\2\5\4\0\5\5\4\0\5\5\1\144"+
    "\13\5\17\0\2\5\4\0\5\5\4\0\3\5\1\145"+
    "\15\5\17\0\2\5\4\0\5\5\4\0\16\5\1\146"+
    "\2\5\17\0\2\5\4\0\5\5\4\0\3\5\1\147"+
    "\15\5\17\0\2\5\4\0\5\5\4\0\3\5\1\150"+
    "\1\5\1\151\13\5\17\0\2\5\4\0\5\5\4\0"+
    "\6\5\1\152\12\5\17\0\2\5\4\0\5\5\4\0"+
    "\21\5\17\0\1\153\1\5\4\0\5\5\4\0\13\5"+
    "\1\154\5\5\17\0\2\5\4\0\1\5\1\155\3\5"+
    "\4\0\21\5\17\0\2\5\4\0\1\5\1\156\3\5"+
    "\4\0\21\5\17\0\2\5\4\0\5\5\4\0\4\5"+
    "\1\157\14\5\17\0\2\5\4\0\2\5\1\160\2\5"+
    "\4\0\21\5\17\0\2\5\4\0\5\5\4\0\1\5"+
    "\1\161\17\5\17\0\2\5\4\0\5\5\4\0\17\5"+
    "\1\162\1\5\17\0\2\5\4\0\2\5\1\163\2\5"+
    "\4\0\21\5\17\0\2\5\4\0\5\5\4\0\1\164"+
    "\20\5\17\0\1\165\1\5\4\0\5\5\4\0\20\5"+
    "\1\166\17\0\2\5\4\0\5\5\4\0\3\5\1\167"+
    "\15\5\17\0\2\5\4\0\1\5\1\170\3\5\4\0"+
    "\21\5\17\0\2\5\4\0\5\5\4\0\4\5\1\171"+
    "\14\5\17\0\2\5\4\0\5\5\4\0\4\5\1\172"+
    "\14\5\17\0\2\5\4\0\5\5\4\0\5\5\1\173"+
    "\13\5\17\0\2\5\4\0\5\5\4\0\5\5\1\174"+
    "\13\5\17\0\2\5\4\0\5\5\4\0\6\5\1\175"+
    "\12\5\17\0\2\5\4\0\5\5\4\0\6\5\1\176"+
    "\12\5\17\0\2\5\4\0\5\5\4\0\2\5\1\177"+
    "\16\5\17\0\2\5\4\0\2\5\1\200\2\5\4\0"+
    "\21\5\17\0\2\5\4\0\5\5\4\0\6\5\1\201"+
    "\12\5\17\0\2\5\4\0\1\5\1\202\3\5\4\0"+
    "\21\5\17\0\2\5\4\0\5\5\4\0\3\5\1\203"+
    "\15\5\17\0\2\5\4\0\5\5\4\0\5\5\1\204"+
    "\13\5\17\0\2\5\4\0\5\5\4\0\3\5\1\205"+
    "\15\5\17\0\2\5\4\0\5\5\4\0\1\5\1\206"+
    "\17\5\17\0\2\5\4\0\5\5\4\0\3\5\1\207"+
    "\15\5\17\0\2\5\4\0\5\5\4\0\4\5\1\210"+
    "\14\5\17\0\2\5\4\0\5\5\4\0\5\5\1\211"+
    "\13\5\17\0\2\5\4\0\5\5\4\0\1\212\20\5"+
    "\17\0\2\5\4\0\5\5\4\0\5\5\1\213\13\5"+
    "\17\0\2\5\4\0\5\5\4\0\6\5\1\214\12\5"+
    "\17\0\2\5\4\0\5\5\4\0\5\5\1\215\13\5"+
    "\17\0\2\5\4\0\5\5\4\0\3\5\1\216\15\5"+
    "\17\0\2\5\4\0\5\5\4\0\3\5\1\217\15\5"+
    "\17\0\2\5\4\0\5\5\4\0\1\5\1\220\17\5"+
    "\17\0\2\5\4\0\2\5\1\221\2\5\4\0\21\5"+
    "\17\0\2\5\4\0\2\5\1\222\2\5\4\0\21\5"+
    "\17\0\2\5\4\0\5\5\4\0\3\5\1\223\15\5"+
    "\17\0\2\5\4\0\5\5\4\0\1\224\20\5\17\0"+
    "\2\5\4\0\5\5\4\0\3\5\1\225\15\5\17\0"+
    "\2\5\4\0\5\5\4\0\7\5\1\226\11\5\17\0"+
    "\2\5\4\0\5\5\4\0\1\5\1\227\17\5\17\0"+
    "\2\5\4\0\5\5\4\0\7\5\1\230\11\5\17\0"+
    "\2\5\4\0\5\5\4\0\6\5\1\231\12\5\17\0"+
    "\2\5\4\0\5\5\4\0\6\5\1\232\12\5\17\0"+
    "\2\5\4\0\1\233\4\5\4\0\21\5\17\0\2\5"+
    "\4\0\1\5\1\234\3\5\4\0\21\5\17\0\2\5"+
    "\4\0\5\5\4\0\17\5\1\235\1\5\17\0\2\5"+
    "\4\0\5\5\4\0\1\5\1\236\17\5\17\0\2\5"+
    "\4\0\5\5\4\0\13\5\1\237\5\5\17\0\2\5"+
    "\4\0\2\5\1\240\2\5\4\0\21\5\17\0\2\5"+
    "\4\0\2\5\1\241\2\5\4\0\21\5\17\0\2\5"+
    "\4\0\5\5\4\0\21\5\17\0\1\5\1\242\4\0"+
    "\5\5\4\0\1\5\1\243\17\5\17\0\2\5\4\0"+
    "\5\5\4\0\21\5\17\0\1\244\1\5\4\0\5\5"+
    "\4\0\5\5\1\245\13\5\17\0\2\5\4\0\5\5"+
    "\4\0\5\5\1\246\13\5\17\0\2\5\4\0\2\5"+
    "\1\247\2\5\4\0\21\5\17\0\2\5\4\0\5\5"+
    "\4\0\13\5\1\250\5\5\17\0\2\5\4\0\5\5"+
    "\4\0\1\5\1\251\17\5\17\0\2\5\4\0\5\5"+
    "\4\0\5\5\1\252\13\5\17\0\2\5\4\0\5\5"+
    "\4\0\16\5\1\253\2\5\17\0\2\5\4\0\1\5"+
    "\1\254\3\5\4\0\21\5\17\0\2\5\4\0\5\5"+
    "\4\0\15\5\1\255\3\5\17\0\2\5\4\0\5\5"+
    "\4\0\14\5\1\256\4\5\17\0\2\5\4\0\5\5"+
    "\4\0\4\5\1\257\14\5\17\0\2\5\4\0\5\5"+
    "\4\0\3\5\1\260\15\5\17\0\2\5\4\0\5\5"+
    "\4\0\4\5\1\261\14\5\17\0\2\5\4\0\5\5"+
    "\4\0\6\5\1\262\12\5\17\0\2\5\4\0\5\5"+
    "\4\0\2\5\1\263\16\5\17\0\2\5\4\0\5\5"+
    "\4\0\10\5\1\264\10\5\17\0\2\5\4\0\5\5"+
    "\4\0\3\5\1\265\15\5\17\0\2\5\4\0\5\5"+
    "\4\0\5\5\1\266\13\5\17\0\2\5\4\0\5\5"+
    "\4\0\2\5\1\267\16\5\17\0\2\5\4\0\5\5"+
    "\4\0\1\270\20\5\17\0\2\5\4\0\5\5\4\0"+
    "\1\5\1\271\17\5\17\0\2\5\4\0\5\5\4\0"+
    "\15\5\1\272\3\5\17\0\2\5\4\0\5\5\4\0"+
    "\1\5\1\273\17\5\17\0\2\5\4\0\5\5\4\0"+
    "\5\5\1\274\13\5\17\0\2\5\4\0\5\5\4\0"+
    "\5\5\1\275\13\5\17\0\2\5\4\0\1\5\1\276"+
    "\3\5\4\0\21\5\17\0\2\5\4\0\5\5\4\0"+
    "\1\5\1\277\17\5\17\0\2\5\4\0\5\5\4\0"+
    "\11\5\1\300\7\5\17\0\2\5\4\0\5\5\4\0"+
    "\2\5\1\301\16\5\17\0\2\5\4\0\5\5\4\0"+
    "\4\5\1\302\14\5\17\0\2\5\4\0\5\5\4\0"+
    "\13\5\1\303\5\5\17\0\2\5\4\0\1\5\1\304"+
    "\3\5\4\0\21\5\17\0\2\5\4\0\5\5\4\0"+
    "\2\5\1\305\16\5\17\0\2\5\4\0\5\5\4\0"+
    "\14\5\1\306\4\5\17\0\2\5\4\0\5\5\4\0"+
    "\15\5\1\307\3\5\17\0\2\5\4\0\5\5\4\0"+
    "\12\5\1\310\6\5\17\0\2\5\4\0\5\5\4\0"+
    "\3\5\1\311\15\5\17\0\2\5\4\0\5\5\4\0"+
    "\5\5\1\312\13\5\17\0\2\5\4\0\5\5\4\0"+
    "\1\5\1\313\17\5\17\0\2\5\4\0\5\5\4\0"+
    "\1\5\1\314\17\5\17\0\2\5\4\0\2\5\1\315"+
    "\2\5\4\0\21\5\17\0\2\5\4\0\5\5\4\0"+
    "\2\5\1\316\16\5\17\0\2\5\4\0\5\5\4\0"+
    "\2\5\1\317\16\5\17\0\2\5\4\0\5\5\4\0"+
    "\4\5\1\320\14\5\17\0\2\5\4\0\5\5\4\0"+
    "\3\5\1\321\15\5\17\0\2\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\1\11\13\1\7\11\1\1\1\11"+
    "\2\1\6\11\3\1\1\0\1\1\1\0\22\1\4\11"+
    "\3\1\1\0\214\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  LexicalErrorManager lexicalErrorManager = new LexicalErrorManager ();
  private int commentCount = 0;

  Token crearToken(int x) {
    Token token = new Token(x);
    token.setLine(yyline + 1);
    token.setColumn(yycolumn + 1);
    token.setLexema(yytext());
    return token;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws LexicalError {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new LexicalError(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws LexicalError {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, LexicalError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return crearToken (sym.ENTERO);
          }
        case 61: break;
        case 32: 
          { return crearToken (sym.CASO);
          }
        case 62: break;
        case 58: 
          { return crearToken(sym.ALTERNATIVAS);
          }
        case 63: break;
        case 3: 
          { return crearToken (sym.ID);
          }
        case 64: break;
        case 47: 
          { return crearToken(sym.ENTONCES);
          }
        case 65: break;
        case 25: 
          { return crearToken(sym.DE);
          }
        case 66: break;
        case 54: 
          { return crearToken(sym.PRINCIPAL);
          }
        case 67: break;
        case 41: 
          { return crearToken(sym.CIERTO);
          }
        case 68: break;
        case 9: 
          { return crearToken(sym.CORCHETE_CERRAR);
          }
        case 69: break;
        case 8: 
          { return crearToken(sym.CORCHETE_ABRIR);
          }
        case 70: break;
        case 11: 
          { return crearToken(sym.PUNTO_COMA);
          }
        case 71: break;
        case 38: 
          { return crearToken(sym.TIPOS);
          }
        case 72: break;
        case 22: 
          { return crearToken (sym.STRING);
          }
        case 73: break;
        case 36: 
          { return crearToken(sym.FALSO);
          }
        case 74: break;
        case 45: 
          { return crearToken (sym.ESCRIBE);
          }
        case 75: break;
        case 57: 
          { return crearToken(sym.PORDEFECTO);
          }
        case 76: break;
        case 6: 
          { return crearToken(sym.PARENTESIS_ABRIR);
          }
        case 77: break;
        case 16: 
          { return crearToken(sym.NEGACION);
          }
        case 78: break;
        case 4: 
          { return crearToken (sym.INT);
          }
        case 79: break;
        case 19: 
          { return crearToken(sym.ALMOHADILLA);
          }
        case 80: break;
        case 24: 
          { return crearToken(sym.EN);
          }
        case 81: break;
        case 55: 
          { return crearToken(sym.CONSTANTES);
          }
        case 82: break;
        case 37: 
          { return crearToken (sym.CORTE);
          }
        case 83: break;
        case 48: 
          { return crearToken(sym.BOOLEANO);
          }
        case 84: break;
        case 35: 
          { return crearToken(sym.PARA);
          }
        case 85: break;
        case 15: 
          { return crearToken(sym.ASIGNACION);
          }
        case 86: break;
        case 52: 
          { return crearToken (sym.CONSTANTE);
          }
        case 87: break;
        case 20: 
          { return crearToken(sym.PUNTO);
          }
        case 88: break;
        case 13: 
          { return crearToken(sym.SUMA);
          }
        case 89: break;
        case 60: 
          { return crearToken(sym.PROCEDIMIENTO);
          }
        case 90: break;
        case 50: 
          { return crearToken(sym.PROGRAMA);
          }
        case 91: break;
        case 43: 
          { return crearToken(sym.VECTOR);
          }
        case 92: break;
        case 33: 
          { return crearToken(sym.SINO);
          }
        case 93: break;
        case 51: 
          { return crearToken(sym.DEVUELVE);
          }
        case 94: break;
        case 56: 
          { return crearToken(sym.ESCRIBE_ENT);
          }
        case 95: break;
        case 31: 
          { return crearToken(sym.VAR);
          }
        case 96: break;
        case 40: 
          { return crearToken(sym.VACIO);
          }
        case 97: break;
        case 49: 
          { return crearToken(sym.MIENTRAS);
          }
        case 98: break;
        case 29: 
          { return crearToken(sym.CONJUNCION);
          }
        case 99: break;
        case 18: 
          { return crearToken(sym.LLAVE_CERRAR);
          }
        case 100: break;
        case 23: 
          { return crearToken(sym.SI);
          }
        case 101: break;
        case 26: 
          { return crearToken(sym.AUTOINCREMENTO);
          }
        case 102: break;
        case 59: 
          { return crearToken(sym.SUBPROGRAMAS);
          }
        case 103: break;
        case 30: 
          { return crearToken(sym.FIN);
          }
        case 104: break;
        case 44: 
          { return crearToken(sym.FUNCION);
          }
        case 105: break;
        case 5: 
          { return crearToken(sym.PRODUCTO);
          }
        case 106: break;
        case 7: 
          { return crearToken(sym.PARENTESIS_CERRAR);
          }
        case 107: break;
        case 14: 
          { return crearToken(sym.MENOR);
          }
        case 108: break;
        case 39: 
          { return crearToken(sym.RANGO);
          }
        case 109: break;
        case 28: 
          { return crearToken(sym.IGUAL);
          }
        case 110: break;
        case 1: 
          { LexicalError error = new LexicalError ();
                           error.setLine (yyline + 1);
                           error.setColumn (yycolumn + 1);
                           error.setLexema (yytext ());
                           lexicalErrorManager.lexicalError (error);
          }
        case 111: break;
        case 10: 
          { return crearToken(sym.APOSTROFE);
          }
        case 112: break;
        case 46: 
          { return crearToken(sym.COMIENZO);
          }
        case 113: break;
        case 53: 
          { return crearToken(sym.VARIABLES);
          }
        case 114: break;
        case 27: 
          { return crearToken(sym.ASIGNACION_SUMA);
          }
        case 115: break;
        case 21: 
          { return crearToken(sym.COMA);
          }
        case 116: break;
        case 34: 
          { return crearToken(sym.TIPO);
          }
        case 117: break;
        case 17: 
          { return crearToken(sym.LLAVE_ABRIR);
          }
        case 118: break;
        case 2: 
          { 
          }
        case 119: break;
        case 12: 
          { return crearToken(sym.DOS_PUNTOS);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
