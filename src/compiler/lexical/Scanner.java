/* The following code was generated by JFlex 1.4.1 on 31.10.2021, 00:38 */

package compiler.lexical;

import compiler.syntax.sym;
import compiler.lexical.Token;
import es.uned.lsi.compiler.lexical.ScannerIF;
import es.uned.lsi.compiler.lexical.LexicalError;
import es.uned.lsi.compiler.lexical.LexicalErrorManager;

// incluir aqui, si es necesario otras importaciones


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 31.10.2021, 00:38 from the specification file
 * <tt>C:/Users/yasma2/OneDrive - InfoCare/Programming/ArquitecturaPLI-2021-2022/doc/specs/scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner, ScannerIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\5\1\0\2\1\22\0\1\1\1\0\1\4\5\0"+
    "\1\33\1\34\1\7\1\27\1\37\1\30\1\40\1\6\12\2\1\42"+
    "\1\41\1\31\1\32\3\0\32\3\1\35\1\0\1\36\3\0\1\11"+
    "\1\43\1\10\1\22\1\23\1\45\1\51\1\3\1\15\2\3\1\21"+
    "\1\46\1\20\1\13\1\16\1\3\1\17\1\12\1\44\1\24\1\14"+
    "\2\3\1\50\1\47\1\25\1\0\1\26\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\4\7\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\3\1\1\23\1\24"+
    "\1\0\1\25\1\0\3\24\1\26\5\24\1\27\1\30"+
    "\1\24\1\31\1\32\1\33\5\24\10\0\1\34\12\0"+
    "\1\35\1\0\1\2\1\36\3\0\1\37\4\0\1\40"+
    "\20\0\1\41\13\0\1\42\1\43\3\0\1\44\2\0"+
    "\1\45\7\0\1\46\16\0\1\47\1\0\1\50\3\0"+
    "\1\51\1\0\1\52\1\53\1\54\1\55\1\56\2\0"+
    "\1\57\1\0\1\60\1\61\4\0\1\62\1\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\176\0\250\0\322\0\52"+
    "\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\52"+
    "\0\52\0\52\0\52\0\52\0\u0222\0\52\0\52\0\52"+
    "\0\52\0\52\0\u024c\0\52\0\52\0\u0276\0\u02a0\0\u02ca"+
    "\0\176\0\52\0\250\0\250\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\52\0\u0498"+
    "\0\u04c2\0\u04ec\0\52\0\52\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\52\0\u0906\0\u02f4\0\52"+
    "\0\u0930\0\u095a\0\u0984\0\52\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\52\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52"+
    "\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2"+
    "\0\u0ccc\0\52\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8"+
    "\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\52\0\52\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\52\0\u0f42\0\u0f6c\0\52\0\u0f96\0\u0fc0"+
    "\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\52\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236"+
    "\0\u1260\0\u128a\0\u12b4\0\u12de\0\52\0\u1308\0\52\0\u1332"+
    "\0\u135c\0\u1386\0\52\0\u13b0\0\52\0\52\0\52\0\52"+
    "\0\52\0\u13da\0\u1404\0\52\0\u142e\0\52\0\52\0\u1458"+
    "\0\u1482\0\u14ac\0\u14d6\0\52\0\u1500\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\5\1\12\1\5\1\13\1\5\1\14\1\5"+
    "\1\15\1\5\1\16\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\5\1\41"+
    "\1\5\54\0\1\4\51\0\2\42\4\0\15\42\16\0"+
    "\7\42\4\43\1\44\1\0\44\43\7\0\1\45\44\0"+
    "\2\42\4\0\1\42\1\46\1\42\1\47\1\42\1\50"+
    "\7\42\16\0\7\42\2\0\2\42\4\0\5\42\1\51"+
    "\6\42\1\52\16\0\7\42\2\0\2\42\4\0\1\42"+
    "\1\53\11\42\1\54\1\42\16\0\7\42\2\0\2\42"+
    "\4\0\1\42\1\55\5\42\1\56\5\42\16\0\7\42"+
    "\2\0\2\42\4\0\3\42\1\57\11\42\16\0\7\42"+
    "\2\0\2\42\4\0\13\42\1\60\1\42\16\0\7\42"+
    "\2\0\2\42\4\0\2\42\1\61\5\42\1\62\4\42"+
    "\16\0\7\42\32\0\1\63\57\0\1\64\13\0\2\42"+
    "\4\0\3\42\1\65\11\42\16\0\7\42\2\0\2\42"+
    "\4\0\5\42\1\66\7\42\16\0\7\42\2\0\2\42"+
    "\4\0\1\42\1\67\3\42\1\70\6\42\1\71\16\0"+
    "\7\42\4\45\1\0\2\45\1\72\42\45\12\0\1\73"+
    "\57\0\1\74\25\0\1\75\26\0\1\76\46\0\1\77"+
    "\74\0\1\100\16\0\1\101\6\0\1\102\42\0\1\103"+
    "\60\0\1\104\45\0\1\105\1\0\1\106\50\0\1\107"+
    "\45\0\1\110\105\0\1\111\20\0\1\112\54\0\1\113"+
    "\54\0\1\114\50\0\1\115\51\0\1\116\31\0\4\45"+
    "\1\0\1\45\1\117\1\72\42\45\13\0\1\120\50\0"+
    "\1\121\54\0\1\122\53\0\1\123\45\0\1\124\54\0"+
    "\1\125\50\0\1\126\51\0\1\127\100\0\1\130\16\0"+
    "\1\131\50\0\1\132\40\0\1\133\20\0\1\134\44\0"+
    "\1\135\10\0\1\136\44\0\1\137\45\0\1\140\7\0"+
    "\1\141\47\0\1\142\43\0\1\143\50\0\1\144\47\0"+
    "\1\145\105\0\1\146\30\0\1\147\72\0\1\150\24\0"+
    "\1\151\45\0\1\152\47\0\1\153\53\0\1\154\61\0"+
    "\1\155\45\0\1\156\42\0\1\157\62\0\1\160\53\0"+
    "\1\161\43\0\1\162\54\0\1\163\50\0\1\164\55\0"+
    "\1\165\40\0\1\166\52\0\1\167\53\0\1\170\45\0"+
    "\1\171\60\0\1\172\44\0\1\173\51\0\1\174\101\0"+
    "\1\175\25\0\1\176\54\0\1\177\40\0\1\200\55\0"+
    "\1\201\50\0\1\202\56\0\1\203\73\0\1\204\16\0"+
    "\1\205\54\0\1\206\47\0\1\207\53\0\1\210\56\0"+
    "\1\211\100\0\1\212\53\0\1\213\21\0\1\214\45\0"+
    "\1\215\102\0\1\216\21\0\1\217\56\0\1\220\42\0"+
    "\1\221\52\0\1\222\57\0\1\223\46\0\1\224\51\0"+
    "\1\225\75\0\1\226\20\0\1\227\55\0\1\230\55\0"+
    "\1\231\74\0\1\232\14\0\1\233\51\0\1\234\57\0"+
    "\1\235\55\0\1\236\45\0\1\237\44\0\1\240\52\0"+
    "\1\241\61\0\1\242\37\0\1\243\52\0\1\244\54\0"+
    "\1\245\55\0\1\246\42\0\1\247\105\0\1\250\26\0"+
    "\1\251\37\0\1\252\60\0\1\253\43\0\1\254\103\0"+
    "\1\255\20\0\1\256\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5418];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\7\1\5\11\1\1\5\11"+
    "\1\1\2\11\4\1\1\11\1\0\1\1\1\0\11\1"+
    "\1\11\3\1\2\11\5\1\10\0\1\1\12\0\1\11"+
    "\1\0\1\1\1\11\3\0\1\11\4\0\1\11\20\0"+
    "\1\11\13\0\2\11\3\0\1\11\2\0\1\11\7\0"+
    "\1\11\16\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\5\11\2\0\1\11\1\0\2\11\4\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  LexicalErrorManager lexicalErrorManager = new LexicalErrorManager ();
  private int commentCount = 0;

  Token crearToken(int x) {
    Token token = new Token(x);
    token.setLine(yyline + 1);
    token.setColumn(yycolumn + 1);
    token.setLexema(yytext());
    return token;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws LexicalError {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new LexicalError(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws LexicalError {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, LexicalError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return crearToken (sym.BOOLEANO);
          }
        case 52: break;
        case 38: 
          { return crearToken (sym.ENTERO);
          }
        case 53: break;
        case 30: 
          { return crearToken (sym.CASO);
          }
        case 54: break;
        case 20: 
          { return crearToken (sym.ID);
          }
        case 55: break;
        case 31: 
          { return crearToken (sym.SINO);
          }
        case 56: break;
        case 47: 
          { return crearToken (sym.VARIABLES);
          }
        case 57: break;
        case 41: 
          { return crearToken (sym.PROGRAMA);
          }
        case 58: break;
        case 11: 
          { return crearToken (sym.PARENTESIS_IZQ);
          }
        case 59: break;
        case 26: 
          { return crearToken (sym.IGUAL_QUE);
          }
        case 60: break;
        case 43: 
          { return crearToken (sym.DEVUELVE);
          }
        case 61: break;
        case 25: 
          { return crearToken (sym.EN);
          }
        case 62: break;
        case 17: 
          { return crearToken (sym.PUNTO_COMA);
          }
        case 63: break;
        case 48: 
          { return crearToken (sym.PRINCIPAL);
          }
        case 64: break;
        case 51: 
          { return crearToken (sym.PROCEDIMIENTO);
          }
        case 65: break;
        case 34: 
          { return crearToken (sym.TIPOS);
          }
        case 66: break;
        case 21: 
          { return crearToken (sym.STRING);
          }
        case 67: break;
        case 35: 
          { return crearToken (sym.FALSO);
          }
        case 68: break;
        case 15: 
          { return crearToken (sym.COMA);
          }
        case 69: break;
        case 14: 
          { return crearToken (sym.CORCHETE_DER);
          }
        case 70: break;
        case 4: 
          { return crearToken (sym.PRODUCTO);
          }
        case 71: break;
        case 36: 
          { return crearToken (sym.CIERTO);
          }
        case 72: break;
        case 19: 
          { return crearToken (sym.Y);
          }
        case 73: break;
        case 3: 
          { return crearToken (sym.INT);
          }
        case 74: break;
        case 40: 
          { return crearToken (sym.COMIENZO);
          }
        case 75: break;
        case 49: 
          { return crearToken (sym.CONSTANTES);
          }
        case 76: break;
        case 39: 
          { return crearToken (sym.FUNCION);
          }
        case 77: break;
        case 10: 
          { return crearToken (sym.ASIGNACION);
          }
        case 78: break;
        case 16: 
          { return crearToken (sym.PUNTO);
          }
        case 79: break;
        case 8: 
          { return crearToken (sym.RESTA);
          }
        case 80: break;
        case 42: 
          { return crearToken (sym.DEVOLVER);
          }
        case 81: break;
        case 45: 
          { return crearToken (sym.ENTONCES);
          }
        case 82: break;
        case 22: 
          { return crearToken (sym.SI);
          }
        case 83: break;
        case 9: 
          { return crearToken (sym.MENOR_QUE);
          }
        case 84: break;
        case 33: 
          { return crearToken (sym.VACIO);
          }
        case 85: break;
        case 13: 
          { return crearToken (sym.CORCHETE_IZQ);
          }
        case 86: break;
        case 12: 
          { return crearToken (sym.PARENTESIS_DER);
          }
        case 87: break;
        case 28: 
          { return crearToken (sym.VAR);
          }
        case 88: break;
        case 6: 
          { return crearToken(sym.LLAVE_CERRAR);
          }
        case 89: break;
        case 44: 
          { return crearToken (sym.ESCRIBIR);
          }
        case 90: break;
        case 23: 
          { return crearToken (sym.NO);
          }
        case 91: break;
        case 24: 
          { return crearToken (sym.DE);
          }
        case 92: break;
        case 37: 
          { return crearToken (sym.VECTOR);
          }
        case 93: break;
        case 27: 
          { return crearToken (sym.RANGO);
          }
        case 94: break;
        case 29: 
          { return crearToken (sym.FIN);
          }
        case 95: break;
        case 1: 
          { LexicalError error = new LexicalError ();
                           error.setLine (yyline + 1);
                           error.setColumn (yycolumn + 1);
                           error.setLexema (yytext ());
                           lexicalErrorManager.lexicalError (error);
          }
        case 96: break;
        case 32: 
          { return crearToken (sym.PARA);
          }
        case 97: break;
        case 50: 
          { return crearToken (sym.SUBPROGRAMAS);
          }
        case 98: break;
        case 7: 
          { return crearToken (sym.SUMA);
          }
        case 99: break;
        case 18: 
          { return crearToken (sym.DOS_PUNTOS);
          }
        case 100: break;
        case 5: 
          { return crearToken(sym.LLAVE_ABRIR);
          }
        case 101: break;
        case 2: 
          { 
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
