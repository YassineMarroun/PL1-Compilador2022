
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 03 12:56:32 CET 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 03 12:56:32 CET 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\051\002\000\002\002" +
    "\004\000\002\003\006\000\002\003\005\000\002\004\004" +
    "\000\002\004\002\000\002\010\007\000\002\005\004\000" +
    "\002\005\002\000\002\011\011\000\002\012\003\000\002" +
    "\012\003\000\002\006\004\000\002\006\003\000\002\013" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\007\000\002\007\004\000" +
    "\002\007\003\000\002\015\012\000\002\015\012\000\002" +
    "\016\011\000\002\017\003\000\002\017\002\000\002\021" +
    "\003\000\002\021\005\000\002\022\004\000\002\020\005" +
    "\000\002\020\004\000\002\023\004\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\033\006\000\002\033\005" +
    "\000\002\034\004\000\002\034\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\003\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\004\000\002\035" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\004\000\002\036\004\000" +
    "\002\040\006\000\002\037\006\000\002\037\005\000\002" +
    "\042\003\000\002\042\005\000\002\026\006\000\002\026" +
    "\007\000\002\026\006\000\002\026\007\000\002\041\005" +
    "\000\002\041\005\000\002\041\004\000\002\041\005\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\025\006\000\002\025\006\000\002\025" +
    "\005\000\002\043\003\000\002\043\003\000\002\027\010" +
    "\000\002\044\004\000\002\044\002\000\002\030\012\000" +
    "\002\045\004\000\002\045\003\000\002\047\010\000\002" +
    "\046\006\000\002\046\002\000\002\032\007\000\002\050" +
    "\004\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\014\007\000\021\000\022\000\031\000\046" +
    "\000\001\002\000\004\002\317\001\002\000\014\007\ufffb" +
    "\021\ufffb\022\ufffb\031\011\046\ufffb\001\002\000\012\007" +
    "\ufff8\021\021\022\ufff8\046\ufff8\001\002\000\004\002\uffff" +
    "\001\002\000\014\007\ufffb\021\ufffb\022\ufffb\031\011\046" +
    "\ufffb\001\002\000\004\005\012\001\002\000\004\046\013" +
    "\001\002\000\004\047\014\001\002\000\004\033\015\001" +
    "\002\000\014\007\ufffa\021\ufffa\022\ufffa\031\ufffa\046\ufffa" +
    "\001\002\000\012\007\ufffc\021\ufffc\022\ufffc\046\ufffc\001" +
    "\002\000\010\007\042\022\040\046\033\001\002\000\030" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\016\ufff8\017" +
    "\ufff8\021\021\022\ufff8\027\ufff8\046\ufff8\001\002\000\004" +
    "\007\022\001\002\000\004\046\023\001\002\000\004\025" +
    "\024\001\002\000\006\046\025\047\027\001\002\000\004" +
    "\026\ufff6\001\002\000\004\026\030\001\002\000\004\026" +
    "\ufff5\001\002\000\004\033\031\001\002\000\030\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\027\ufff7\046\ufff7\001\002\000\026\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\022" +
    "\ufff9\027\ufff9\046\ufff9\001\002\000\004\046\171\001\002" +
    "\000\026\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\016" +
    "\ufff3\017\ufff3\022\ufff3\027\ufff3\046\ufff3\001\002\000\004" +
    "\002\ufffd\001\002\000\006\007\315\022\040\001\002\000" +
    "\004\002\uffeb\001\002\000\006\015\300\046\277\001\002" +
    "\000\010\007\042\022\040\046\033\001\002\000\004\046" +
    "\043\001\002\000\012\023\050\032\046\033\ufff0\044\047" +
    "\001\002\000\004\033\045\001\002\000\026\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\016\ufff1\017\ufff1\022\ufff1" +
    "\027\ufff1\046\ufff1\001\002\000\004\046\171\001\002\000" +
    "\004\047\272\001\002\000\006\007\054\024\uffe6\001\002" +
    "\000\006\024\uffe7\032\270\001\002\000\004\024\056\001" +
    "\002\000\006\024\uffe5\032\uffe5\001\002\000\004\046\055" +
    "\001\002\000\006\024\uffe3\032\uffe3\001\002\000\004\027" +
    "\057\001\002\000\026\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\016\ufff8\017\ufff8\021\021\027\ufff8\046\ufff8\001" +
    "\002\000\004\030\267\001\002\000\024\007\105\010\073" +
    "\011\075\012\074\013\106\016\064\017\077\027\101\046" +
    "\070\001\002\000\030\006\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\016\uffdb\017\uffdb\020\uffdb\027\uffdb\030\uffdb\046" +
    "\uffdb\001\002\000\030\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\016\uffdc\017\uffdc\020\uffdc\027\uffdc\030\uffdc\046" +
    "\uffdc\001\002\000\012\023\136\033\265\046\133\047\137" +
    "\001\002\000\024\010\073\011\075\012\074\013\106\016" +
    "\064\017\077\027\101\030\uffe1\046\127\001\002\000\030" +
    "\006\uffde\010\uffde\011\uffde\012\uffde\013\uffde\016\uffde\017" +
    "\uffde\020\uffde\027\uffde\030\uffde\046\uffde\001\002\000\030" +
    "\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\027\uffd7\030\uffd7\046\uffd7\001\002\000\014" +
    "\025\131\043\uffb0\044\uffb0\045\uffb0\046\171\001\002\000" +
    "\010\043\uffaf\044\uffaf\045\uffaf\001\002\000\026\006\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\016\uffdf\017\uffdf\027" +
    "\uffdf\030\uffdf\046\uffdf\001\002\000\004\023\254\001\002" +
    "\000\004\023\231\001\002\000\004\023\223\001\002\000" +
    "\030\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\027\uffdd\030\uffdd\046\uffdd\001\002\000" +
    "\004\023\214\001\002\000\030\006\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\016\uffda\017\uffda\020\uffda\027\uffda\030" +
    "\uffda\046\uffda\001\002\000\024\007\105\010\073\011\075" +
    "\012\074\013\106\016\064\017\077\027\101\046\070\001" +
    "\002\000\024\007\105\010\073\011\075\012\074\013\106" +
    "\016\064\017\077\027\101\046\070\001\002\000\010\043" +
    "\173\044\172\045\174\001\002\000\030\006\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\016\uffd9\017\uffd9\020\uffd9\027" +
    "\uffd9\030\uffd9\046\uffd9\001\002\000\004\046\171\001\002" +
    "\000\004\023\110\001\002\000\030\006\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\020\uffd8\027\uffd8" +
    "\030\uffd8\046\uffd8\001\002\000\012\023\116\042\114\046" +
    "\112\047\117\001\002\000\024\024\uffc9\032\uffc9\033\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\170\001" +
    "\002\000\030\023\150\024\uffc8\025\131\032\uffc8\033\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\167\001" +
    "\002\000\022\024\uffca\032\uffca\033\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\001\002\000\012\023\116\042" +
    "\114\046\112\047\117\001\002\000\022\024\uffd0\032\uffd0" +
    "\033\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001" +
    "\002\000\012\023\116\042\114\046\112\047\117\001\002" +
    "\000\022\024\uffc7\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\001\002\000\016\024\126\035\122" +
    "\036\125\037\123\040\121\041\124\001\002\000\012\023" +
    "\116\042\114\046\112\047\117\001\002\000\012\023\116" +
    "\042\114\046\112\047\117\001\002\000\012\023\116\042" +
    "\114\046\112\047\117\001\002\000\012\023\116\042\114" +
    "\046\112\047\117\001\002\000\012\023\116\042\114\046" +
    "\112\047\117\001\002\000\022\010\073\011\075\012\074" +
    "\013\106\016\064\017\077\027\101\046\127\001\002\000" +
    "\012\025\131\043\uffb0\044\uffb0\045\uffb0\001\002\000\030" +
    "\006\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\027\uffa5\030\uffa5\046\uffa5\001\002\000\010" +
    "\023\136\046\133\047\137\001\002\000\016\024\uffb6\026" +
    "\uffb6\033\uffb6\035\uffb6\036\uffb6\043\uffb6\001\002\000\022" +
    "\023\150\024\uffb5\025\131\026\uffb5\033\uffb5\035\uffb5\036" +
    "\uffb5\043\uffb5\001\002\000\012\026\147\035\142\036\143" +
    "\043\141\001\002\000\016\024\uffb7\026\uffb7\033\uffb7\035" +
    "\uffb7\036\uffb7\043\uffb7\001\002\000\010\023\136\046\133" +
    "\047\137\001\002\000\016\024\uffb4\026\uffb4\033\uffb4\035" +
    "\uffb4\036\uffb4\043\uffb4\001\002\000\012\024\144\035\142" +
    "\036\143\043\141\001\002\000\016\024\uffb9\026\uffb9\033" +
    "\uffb9\035\uffb9\036\uffb9\043\uffb9\001\002\000\010\023\136" +
    "\046\133\047\137\001\002\000\010\023\136\046\133\047" +
    "\137\001\002\000\016\024\uffb8\026\uffb8\033\uffb8\035\uffb8" +
    "\036\uffb8\043\uffb8\001\002\000\016\024\uffba\026\uffba\033" +
    "\uffba\035\142\036\uffba\043\uffba\001\002\000\016\024\uffbb" +
    "\026\uffbb\033\uffbb\035\uffbb\036\uffbb\043\uffbb\001\002\000" +
    "\032\024\uffc4\026\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\045\uffc4\001" +
    "\002\000\014\023\116\024\151\042\114\046\112\047\117" +
    "\001\002\000\026\024\uffc2\026\uffc2\032\uffc2\033\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2\001\002" +
    "\000\020\024\uffc1\032\155\035\122\036\125\037\123\040" +
    "\121\041\124\001\002\000\004\024\154\001\002\000\026" +
    "\024\uffc3\026\uffc3\032\uffc3\033\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\043\uffc3\001\002\000\012\023\116" +
    "\042\114\046\112\047\117\001\002\000\004\024\uffc0\001" +
    "\002\000\022\024\uffd1\032\uffd1\033\uffd1\035\122\036\uffd1" +
    "\037\123\040\121\041\124\001\002\000\022\024\uffcd\032" +
    "\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\001\002\000\022\024\uffce\032\uffce\033\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\121\041\124\001\002\000\022\024\uffd2" +
    "\032\uffd2\033\uffd2\035\uffd2\036\uffd2\037\123\040\121\041" +
    "\124\001\002\000\022\024\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\124\001\002\000\016\024" +
    "\165\035\122\036\125\037\123\040\121\041\124\001\002" +
    "\000\022\024\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\001\002\000\022\024\uffcc\032\uffcc" +
    "\033\uffcc\035\122\036\125\037\123\040\121\041\124\001" +
    "\002\000\022\024\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\001\002\000\022\024\uffc5\032" +
    "\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\001\002\000\010\032\046\033\ufff0\044\047\001\002\000" +
    "\012\023\116\042\114\046\112\047\117\001\002\000\004" +
    "\033\177\001\002\000\012\023\116\042\114\046\112\047" +
    "\117\001\002\000\016\033\176\035\122\036\125\037\123" +
    "\040\121\041\124\001\002\000\030\006\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\016\uffb2\017\uffb2\020\uffb2\027\uffb2" +
    "\030\uffb2\046\uffb2\001\002\000\030\006\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\016\uffb1\017\uffb1\020\uffb1\027\uffb1" +
    "\030\uffb1\046\uffb1\001\002\000\016\033\201\035\122\036" +
    "\125\037\123\040\121\041\124\001\002\000\030\006\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\027\uffb3\030\uffb3\046\uffb3\001\002\000\024\010\073" +
    "\011\075\012\074\013\106\016\064\017\077\027\101\030" +
    "\uffe2\046\127\001\002\000\026\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\016\ufff4\017\ufff4\022\ufff4\027\ufff4\046" +
    "\ufff4\001\002\000\026\006\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\016\uffe0\017\uffe0\027\uffe0\030\uffe0\046\uffe0\001" +
    "\002\000\024\010\uffd3\011\uffd3\012\uffd3\013\uffd3\016\uffd3" +
    "\017\uffd3\027\uffd3\030\uffd3\046\uffd3\001\002\000\024\007" +
    "\105\010\073\011\075\012\074\013\106\016\064\017\077" +
    "\027\101\046\070\001\002\000\024\010\073\011\075\012" +
    "\074\013\106\016\064\017\077\027\101\030\210\046\127" +
    "\001\002\000\030\006\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\027\uffd5\030\uffd5\046\uffd5" +
    "\001\002\000\024\010\uffd4\011\uffd4\012\uffd4\013\uffd4\016" +
    "\uffd4\017\uffd4\027\uffd4\030\uffd4\046\uffd4\001\002\000\024" +
    "\010\073\011\075\012\074\013\106\016\064\017\077\027" +
    "\101\030\213\046\127\001\002\000\030\006\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\016\uffd6\017\uffd6\020\uffd6\027" +
    "\uffd6\030\uffd6\046\uffd6\001\002\000\012\023\116\042\114" +
    "\046\112\047\117\001\002\000\016\024\216\035\122\036" +
    "\125\037\123\040\121\041\124\001\002\000\022\010\073" +
    "\011\075\012\074\013\106\016\064\017\077\027\101\046" +
    "\127\001\002\000\030\006\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\016\uffac\017\uffac\020\221\027\uffac\030\uffac\046" +
    "\uffac\001\002\000\030\006\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\016\uffae\017\uffae\020\uffae\027\uffae\030\uffae\046" +
    "\uffae\001\002\000\022\010\073\011\075\012\074\013\106" +
    "\016\064\017\077\027\101\046\127\001\002\000\030\006" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\016\uffad\017\uffad" +
    "\020\uffad\027\uffad\030\uffad\046\uffad\001\002\000\012\023" +
    "\136\024\225\046\133\047\137\001\002\000\012\024\227" +
    "\035\142\036\143\043\141\001\002\000\004\033\226\001" +
    "\002\000\030\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\027\uffbd\030\uffbd\046\uffbd\001" +
    "\002\000\004\033\230\001\002\000\030\006\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\016\uffbc\017\uffbc\020\uffbc\027" +
    "\uffbc\030\uffbc\046\uffbc\001\002\000\012\023\116\042\114" +
    "\046\112\047\117\001\002\000\016\024\233\035\122\036" +
    "\125\037\123\040\121\041\124\001\002\000\004\027\234" +
    "\001\002\000\004\004\237\001\002\000\010\004\237\014" +
    "\245\030\uffa6\001\002\000\010\004\uffa9\014\uffa9\030\uffa9" +
    "\001\002\000\004\047\240\001\002\000\004\034\241\001" +
    "\002\000\022\010\073\011\075\012\074\013\106\016\064" +
    "\017\077\027\101\046\127\001\002\000\024\006\243\010" +
    "\073\011\075\012\074\013\106\016\064\017\077\027\101" +
    "\046\127\001\002\000\004\033\244\001\002\000\010\004" +
    "\uffa8\014\uffa8\030\uffa8\001\002\000\022\010\073\011\075" +
    "\012\074\013\106\016\064\017\077\027\101\046\127\001" +
    "\002\000\010\004\uffaa\014\uffaa\030\uffaa\001\002\000\004" +
    "\030\250\001\002\000\030\006\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\016\uffab\017\uffab\020\uffab\027\uffab\030\uffab" +
    "\046\uffab\001\002\000\024\006\252\010\073\011\075\012" +
    "\074\013\106\016\064\017\077\027\101\046\127\001\002" +
    "\000\004\033\253\001\002\000\004\030\uffa7\001\002\000" +
    "\006\024\256\050\255\001\002\000\004\024\260\001\002" +
    "\000\004\033\257\001\002\000\030\006\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\016\uffbf\017\uffbf\020\uffbf\027\uffbf" +
    "\030\uffbf\046\uffbf\001\002\000\004\033\261\001\002\000" +
    "\030\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\027\uffbe\030\uffbe\046\uffbe\001\002\000" +
    "\004\033\263\001\002\000\026\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\016\ufff2\017\ufff2\022\ufff2\027\ufff2\046" +
    "\ufff2\001\002\000\012\033\266\035\142\036\143\043\141" +
    "\001\002\000\030\006\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\027\uffa4\030\uffa4\046\uffa4" +
    "\001\002\000\030\006\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\027\uffa3\030\uffa3\046\uffa3" +
    "\001\002\000\006\007\uffea\022\uffea\001\002\000\004\007" +
    "\054\001\002\000\006\024\uffe4\032\uffe4\001\002\000\006" +
    "\032\273\033\uffee\001\002\000\004\046\171\001\002\000" +
    "\004\033\uffed\001\002\000\004\033\uffef\001\002\000\004" +
    "\002\ufffe\001\002\000\004\023\306\001\002\000\004\023" +
    "\301\001\002\000\004\024\302\001\002\000\004\027\303" +
    "\001\002\000\026\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\016\ufff8\017\ufff8\021\021\027\ufff8\046\ufff8\001\002" +
    "\000\004\030\305\001\002\000\004\002\uffe8\001\002\000" +
    "\006\007\054\024\uffe6\001\002\000\004\024\310\001\002" +
    "\000\004\027\311\001\002\000\026\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\016\ufff8\017\ufff8\021\021\027\ufff8" +
    "\046\ufff8\001\002\000\004\030\313\001\002\000\006\007" +
    "\uffe9\022\uffe9\001\002\000\004\002\uffec\001\002\000\004" +
    "\046\316\001\002\000\004\023\050\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\006\002\003\051\004\001\001\000\002\001" +
    "\001\000\010\003\006\004\005\010\007\001\001\000\006" +
    "\005\016\011\017\001\001\000\002\001\001\000\006\004" +
    "\015\010\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\040\007\034\013\033\015\035" +
    "\016\036\001\001\000\006\005\031\011\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\313\015\035\016\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\275\013" +
    "\202\015\035\016\036\001\001\000\004\014\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\274\001\001\000\002\001\001\000\010\017\051" +
    "\021\050\022\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\060\011\017\020\057\001" +
    "\001\000\002\001\001\000\036\006\101\013\033\023\064" +
    "\024\071\025\065\026\075\027\062\030\061\031\077\032" +
    "\103\033\066\040\070\043\102\050\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\037\134\040\131\041" +
    "\263\001\001\000\030\024\203\025\065\026\075\027\062" +
    "\030\061\031\077\032\103\033\066\040\070\043\102\050" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\205\013\033\024\204\025\065\026\075\027\062\030\061" +
    "\031\077\032\103\033\066\034\206\040\070\043\102\050" +
    "\106\001\001\000\034\013\202\023\201\024\071\025\065" +
    "\026\075\027\062\030\061\031\077\032\103\033\066\040" +
    "\070\043\102\050\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\117\036\114\037\112\040\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\165\036\114\037\112\040\110\001\001" +
    "\000\002\001\001\000\012\035\163\036\114\037\112\040" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\035\162\036\114\037\112\040\110\001\001\000\012\035" +
    "\161\036\114\037\112\040\110\001\001\000\012\035\160" +
    "\036\114\037\112\040\110\001\001\000\012\035\157\036" +
    "\114\037\112\040\110\001\001\000\012\035\156\036\114" +
    "\037\112\040\110\001\001\000\030\024\127\025\065\026" +
    "\075\027\062\030\061\031\077\032\103\033\066\040\070" +
    "\043\102\050\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\134\040\131\041\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\134\040\131\041\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\037" +
    "\134\040\131\041\145\001\001\000\010\037\134\040\131" +
    "\041\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\035\151\036\114" +
    "\037\112\040\110\042\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\035\151\036\114\037\112\040\110\042\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\035\177\036" +
    "\114\037\112\040\110\001\001\000\002\001\001\000\012" +
    "\035\174\036\114\037\112\040\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\024\203\025\065\026\075\027" +
    "\062\030\061\031\077\032\103\033\066\040\070\043\102" +
    "\050\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\013\202\024\204\025\065\026\075" +
    "\027\062\030\061\031\077\032\103\033\066\034\211\040" +
    "\070\043\102\050\106\001\001\000\030\024\210\025\065" +
    "\026\075\027\062\030\061\031\077\032\103\033\066\040" +
    "\070\043\102\050\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\024\210\025\065\026\075\027\062\030" +
    "\061\031\077\032\103\033\066\040\070\043\102\050\106" +
    "\001\001\000\002\001\001\000\012\035\214\036\114\037" +
    "\112\040\110\001\001\000\002\001\001\000\030\024\216" +
    "\025\065\026\075\027\062\030\061\031\077\032\103\033" +
    "\066\040\070\043\102\050\106\001\001\000\004\044\217" +
    "\001\001\000\002\001\001\000\030\024\221\025\065\026" +
    "\075\027\062\030\061\031\077\032\103\033\066\040\070" +
    "\043\102\050\106\001\001\000\002\001\001\000\010\037" +
    "\134\040\131\041\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\231\036\114\037\112\040\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\234\047" +
    "\235\001\001\000\006\046\246\047\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\023" +
    "\241\024\071\025\065\026\075\027\062\030\061\031\077" +
    "\032\103\033\066\040\070\043\102\050\106\001\001\000" +
    "\030\024\203\025\065\026\075\027\062\030\061\031\077" +
    "\032\103\033\066\040\070\043\102\050\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\023\250\024\071" +
    "\025\065\026\075\027\062\030\061\031\077\032\103\033" +
    "\066\040\070\043\102\050\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\024\203\025" +
    "\065\026\075\027\062\030\061\031\077\032\103\033\066" +
    "\040\070\043\102\050\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\060\011" +
    "\017\020\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\306\021\050\022\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\060\011\017\020\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciaDevuelve ::= DEVUELVE expresionAritmetica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaDevuelve ::= DEVUELVE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciaMientras ::= MIENTRAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // defectoAlternativa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defectoAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // defectoAlternativa ::= PORDEFECTO sentencias CORTE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defectoAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // casoAlternativa ::= CASO INT DOS_PUNTOS sentencias CORTE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlternativa",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // casosAlternativa ::= casoAlternativa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // casosAlternativa ::= casosAlternativa casoAlternativa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaAlternativas ::= ALTERNATIVAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR LLAVE_ABRIR casosAlternativa defectoAlternativa LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parteElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parteElse ::= SINO sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaSi ::= SI PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia parteElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // referencia ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // referencia ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaAsignacion ::= referencia AUTOINCREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaAsignacion ::= referencia ASIGNACION_SUMA expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaAsignacion ::= referencia ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionAritmetica ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionAritmetica ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionAritmetica ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionAritmetica ::= llamadaProcedimientos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionAritmetica ::= PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionAritmetica ::= expresionAritmetica AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionAritmetica ::= expresionAritmetica PRODUCTO expresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionAritmetica ::= expresionAritmetica SUMA expresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaSalida ::= ESCRIBE_ENT PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaSalida ::= ESCRIBE_ENT PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaSalida ::= ESCRIBE PARENTESIS_ABRIR STRING PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaSalida ::= ESCRIBE PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // argumentos ::= expresion COMA argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // llamadaProcedimientos ::= ID PARENTESIS_ABRIR PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimientos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamadaProcedimientos ::= ID PARENTESIS_ABRIR argumentos PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimientos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresionVector ::= ID CORCHETE_ABRIR expresionAritmetica CORCHETE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionVector",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionAutoincremento ::= expresionVector AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAutoincremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionAutoincremento ::= ID AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAutoincremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= llamadaProcedimientos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= PARENTESIS_ABRIR expresion PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion CONJUNCION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresionAutoincremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion PRODUCTO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion SUMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaBloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaBloque ::= sentenciaBloque sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloqueSentencia ::= LLAVE_ABRIR sentenciaBloque LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloqueSentencia ::= LLAVE_ABRIR declaracionVariables sentenciaBloque LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= bloqueSentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= sentenciaDevuelve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= sentenciaMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= sentenciaAlternativas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= sentenciaSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= sentenciaSalida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloqueFuncion ::= declaracionTipos sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFuncion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloqueFuncion ::= declaracionTipos declaracionVariables sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFuncion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionParametro ::= ENTERO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaParametros ::= listaParametros COMA declaracionParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaParametros ::= declaracionParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametrosFormales ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosFormales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametrosFormales ::= listaParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosFormales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcionPrincipal ::= VACIO PRINCIPAL PARENTESIS_ABRIR PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionSubprograma ::= VACIO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionSubprograma ::= ENTERO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionSubprogramas ::= funcionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIds ::= ID ASIGNACION INT COMA listadoIds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listadoIds ::= ID ASIGNACION INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listadoIds ::= ID COMA listadoIds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listadoIds ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionVariable ::= ENTERO listadoIds PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionVariable ::= ID listadoIds PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVariables ::= declaracionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tamanhoTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamanhoTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tamanhoTipo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamanhoTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionTipo ::= TIPO ENTERO ID CORCHETE_ABRIR tamanhoTipo CORCHETE_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionTipos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracionConstante ::= ALMOHADILLA CONSTANTE ID INT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionConstantes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= declaracionConstantes declaracionTipos declaracionSubprogramas 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= declaracionConstantes declaracionTipos declaracionVariables declaracionSubprogramas 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

