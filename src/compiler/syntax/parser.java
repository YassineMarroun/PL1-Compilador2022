
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 08 04:02:43 CET 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 08 04:02:43 CET 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\050\002\000\002\002" +
    "\004\000\002\003\006\000\002\003\005\000\002\004\004" +
    "\000\002\004\002\000\002\010\007\000\002\005\004\000" +
    "\002\005\002\000\002\011\011\000\002\012\003\000\002" +
    "\012\003\000\002\006\004\000\002\006\003\000\002\013" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\007\000\002\007\004\000" +
    "\002\007\003\000\002\015\012\000\002\015\012\000\002" +
    "\016\011\000\002\017\003\000\002\017\002\000\002\021" +
    "\003\000\002\021\005\000\002\022\004\000\002\020\005" +
    "\000\002\020\004\000\002\023\004\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\033\006\000\002\033\005\000\002\034\004" +
    "\000\002\034\003\000\002\035\005\000\002\035\005\000" +
    "\002\035\003\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\004\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\004\000\002\036\004\000\002\040\006\000" +
    "\002\037\006\000\002\037\005\000\002\042\003\000\002" +
    "\042\005\000\002\026\006\000\002\026\007\000\002\026" +
    "\006\000\002\026\007\000\002\041\005\000\002\041\005" +
    "\000\002\041\004\000\002\041\005\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\025\006\000\002\025\006\000\002\043\003\000\002\043" +
    "\003\000\002\027\010\000\002\044\004\000\002\044\002" +
    "\000\002\030\012\000\002\045\004\000\002\045\003\000" +
    "\002\047\010\000\002\046\006\000\002\046\002\000\002" +
    "\032\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\014\004\000\007\000\010\000\021\000\045" +
    "\000\001\002\000\004\002\310\001\002\000\014\004\011" +
    "\007\ufffb\010\ufffb\021\ufffb\045\ufffb\001\002\000\012\007" +
    "\021\010\ufff8\021\ufff8\045\ufff8\001\002\000\004\002\uffff" +
    "\001\002\000\014\004\011\007\ufffb\010\ufffb\021\ufffb\045" +
    "\ufffb\001\002\000\004\005\012\001\002\000\004\045\013" +
    "\001\002\000\004\046\014\001\002\000\004\006\015\001" +
    "\002\000\014\004\ufffa\007\ufffa\010\ufffa\021\ufffa\045\ufffa" +
    "\001\002\000\012\007\ufffc\010\ufffc\021\ufffc\045\ufffc\001" +
    "\002\000\010\010\042\021\040\045\033\001\002\000\026" +
    "\007\021\010\ufff8\017\ufff8\021\ufff8\032\ufff8\033\ufff8\035" +
    "\ufff8\037\ufff8\044\ufff8\045\ufff8\001\002\000\004\010\022" +
    "\001\002\000\004\045\023\001\002\000\004\011\024\001" +
    "\002\000\006\045\025\046\027\001\002\000\004\012\ufff6" +
    "\001\002\000\004\012\030\001\002\000\004\012\ufff5\001" +
    "\002\000\004\006\031\001\002\000\026\007\ufff7\010\ufff7" +
    "\017\ufff7\021\ufff7\032\ufff7\033\ufff7\035\ufff7\037\ufff7\044" +
    "\ufff7\045\ufff7\001\002\000\024\010\ufff9\017\ufff9\021\ufff9" +
    "\032\ufff9\033\ufff9\035\ufff9\037\ufff9\044\ufff9\045\ufff9\001" +
    "\002\000\004\045\167\001\002\000\024\010\ufff3\017\ufff3" +
    "\021\ufff3\032\ufff3\033\ufff3\035\ufff3\037\ufff3\044\ufff3\045" +
    "\ufff3\001\002\000\004\002\ufffd\001\002\000\006\010\306" +
    "\021\040\001\002\000\004\002\uffeb\001\002\000\006\022" +
    "\271\045\270\001\002\000\010\010\042\021\040\045\033" +
    "\001\002\000\004\045\043\001\002\000\012\006\ufff0\013" +
    "\046\014\047\015\050\001\002\000\004\006\045\001\002" +
    "\000\024\010\ufff1\017\ufff1\021\ufff1\032\ufff1\033\ufff1\035" +
    "\ufff1\037\ufff1\044\ufff1\045\ufff1\001\002\000\004\045\167" +
    "\001\002\000\004\046\263\001\002\000\006\010\054\016" +
    "\uffe6\001\002\000\006\013\261\016\uffe7\001\002\000\004" +
    "\016\056\001\002\000\006\013\uffe5\016\uffe5\001\002\000" +
    "\004\045\055\001\002\000\006\013\uffe3\016\uffe3\001\002" +
    "\000\004\017\057\001\002\000\024\007\021\010\ufff8\017" +
    "\ufff8\032\ufff8\033\ufff8\035\ufff8\037\ufff8\044\ufff8\045\ufff8" +
    "\001\002\000\004\020\260\001\002\000\022\010\104\017" +
    "\100\032\072\033\074\035\076\037\073\044\105\045\067" +
    "\001\002\000\026\017\uffdb\020\uffdb\032\uffdb\033\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\042\uffdb\044\uffdb\045\uffdb\001\002" +
    "\000\026\017\uffdc\020\uffdc\032\uffdc\033\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\042\uffdc\044\uffdc\045\uffdc\001\002\000\022" +
    "\017\100\020\uffe1\032\072\033\074\035\076\037\073\044" +
    "\105\045\126\001\002\000\026\017\uffde\020\uffde\032\uffde" +
    "\033\uffde\035\uffde\036\uffde\037\uffde\042\uffde\044\uffde\045" +
    "\uffde\001\002\000\026\017\uffd8\020\uffd8\032\uffd8\033\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\042\uffd8\044\uffd8\045\uffd8\001" +
    "\002\000\012\011\127\014\uffb2\034\uffb2\045\167\001\002" +
    "\000\006\014\uffb1\034\uffb1\001\002\000\024\017\uffdf\020" +
    "\uffdf\032\uffdf\033\uffdf\035\uffdf\037\uffdf\042\uffdf\044\uffdf" +
    "\045\uffdf\001\002\000\004\015\250\001\002\000\004\015" +
    "\225\001\002\000\004\015\217\001\002\000\026\017\uffdd" +
    "\020\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd\037\uffdd\042" +
    "\uffdd\044\uffdd\045\uffdd\001\002\000\004\015\210\001\002" +
    "\000\026\017\uffda\020\uffda\032\uffda\033\uffda\035\uffda\036" +
    "\uffda\037\uffda\042\uffda\044\uffda\045\uffda\001\002\000\022" +
    "\010\104\017\100\032\072\033\074\035\076\037\073\044" +
    "\105\045\067\001\002\000\022\010\104\017\100\032\072" +
    "\033\074\035\076\037\073\044\105\045\067\001\002\000" +
    "\006\014\170\034\171\001\002\000\026\017\uffd9\020\uffd9" +
    "\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\001\002\000\004\045\167\001\002\000\004" +
    "\015\106\001\002\000\012\015\114\030\112\045\110\046" +
    "\116\001\002\000\024\006\uffca\013\uffca\016\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\031\166\001\002\000" +
    "\030\006\uffc9\011\127\013\uffc9\015\146\016\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\165\001\002\000" +
    "\022\006\uffcb\013\uffcb\016\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\001\002\000\012\015\114\030\112\045" +
    "\110\046\116\001\002\000\022\006\uffd1\013\uffd1\016\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\001\002\000" +
    "\012\015\114\030\112\045\110\046\116\001\002\000\016" +
    "\016\124\023\120\024\122\025\117\026\121\027\123\001" +
    "\002\000\022\006\uffc8\013\uffc8\016\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\001\002\000\012\015\114\030" +
    "\112\045\110\046\116\001\002\000\012\015\114\030\112" +
    "\045\110\046\116\001\002\000\012\015\114\030\112\045" +
    "\110\046\116\001\002\000\012\015\114\030\112\045\110" +
    "\046\116\001\002\000\012\015\114\030\112\045\110\046" +
    "\116\001\002\000\020\017\100\032\072\033\074\035\076" +
    "\037\073\044\105\045\126\001\002\000\026\017\uffa7\020" +
    "\uffa7\032\uffa7\033\uffa7\035\uffa7\036\uffa7\037\uffa7\042\uffa7" +
    "\044\uffa7\045\uffa7\001\002\000\010\011\127\014\uffb2\034" +
    "\uffb2\001\002\000\010\015\134\045\131\046\135\001\002" +
    "\000\014\012\uffb7\016\uffb7\023\uffb7\024\uffb7\031\uffb7\001" +
    "\002\000\020\011\127\012\uffb6\015\146\016\uffb6\023\uffb6" +
    "\024\uffb6\031\uffb6\001\002\000\012\012\145\023\137\024" +
    "\141\031\140\001\002\000\014\012\uffb8\016\uffb8\023\uffb8" +
    "\024\uffb8\031\uffb8\001\002\000\010\015\134\045\131\046" +
    "\135\001\002\000\014\012\uffb5\016\uffb5\023\uffb5\024\uffb5" +
    "\031\uffb5\001\002\000\012\016\142\023\137\024\141\031" +
    "\140\001\002\000\010\015\134\045\131\046\135\001\002" +
    "\000\014\012\uffba\016\uffba\023\uffba\024\uffba\031\uffba\001" +
    "\002\000\010\015\134\045\131\046\135\001\002\000\014" +
    "\012\uffb9\016\uffb9\023\uffb9\024\uffb9\031\uffb9\001\002\000" +
    "\014\012\uffbb\016\uffbb\023\137\024\uffbb\031\uffbb\001\002" +
    "\000\014\012\uffbc\016\uffbc\023\uffbc\024\uffbc\031\uffbc\001" +
    "\002\000\032\006\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\034" +
    "\uffc5\001\002\000\014\015\114\016\147\030\112\045\110" +
    "\046\116\001\002\000\026\006\uffc3\012\uffc3\013\uffc3\016" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3" +
    "\001\002\000\020\013\153\016\uffc2\023\120\024\122\025" +
    "\117\026\121\027\123\001\002\000\004\016\152\001\002" +
    "\000\026\006\uffc4\012\uffc4\013\uffc4\016\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\001\002\000\012" +
    "\015\114\030\112\045\110\046\116\001\002\000\004\016" +
    "\uffc1\001\002\000\022\006\uffce\013\uffce\016\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\001\002\000\022\006" +
    "\uffd2\013\uffd2\016\uffd2\023\120\024\uffd2\025\117\026\121" +
    "\027\123\001\002\000\022\006\uffcf\013\uffcf\016\uffcf\023" +
    "\uffcf\024\uffcf\025\117\026\uffcf\027\123\001\002\000\022" +
    "\006\uffd3\013\uffd3\016\uffd3\023\uffd3\024\uffd3\025\117\026" +
    "\121\027\123\001\002\000\022\006\uffd0\013\uffd0\016\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\123\001\002\000" +
    "\016\016\163\023\120\024\122\025\117\026\121\027\123" +
    "\001\002\000\022\006\uffcc\013\uffcc\016\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\001\002\000\022\006\uffcd" +
    "\013\uffcd\016\uffcd\023\120\024\122\025\117\026\121\027" +
    "\123\001\002\000\022\006\uffc7\013\uffc7\016\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\001\002\000\022\006" +
    "\uffc6\013\uffc6\016\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\001\002\000\010\006\ufff0\013\046\014\047\001" +
    "\002\000\012\015\114\030\112\045\110\046\116\001\002" +
    "\000\012\015\114\030\112\045\110\046\116\001\002\000" +
    "\016\006\173\023\120\024\122\025\117\026\121\027\123" +
    "\001\002\000\026\017\uffb3\020\uffb3\032\uffb3\033\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\042\uffb3\044\uffb3\045\uffb3\001\002" +
    "\000\016\006\175\023\120\024\122\025\117\026\121\027" +
    "\123\001\002\000\026\017\uffb4\020\uffb4\032\uffb4\033\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\042\uffb4\044\uffb4\045\uffb4\001" +
    "\002\000\022\017\100\020\uffe2\032\072\033\074\035\076" +
    "\037\073\044\105\045\126\001\002\000\024\010\ufff4\017" +
    "\ufff4\021\ufff4\032\ufff4\033\ufff4\035\ufff4\037\ufff4\044\ufff4" +
    "\045\ufff4\001\002\000\024\017\uffe0\020\uffe0\032\uffe0\033" +
    "\uffe0\035\uffe0\037\uffe0\042\uffe0\044\uffe0\045\uffe0\001\002" +
    "\000\022\017\uffd4\020\uffd4\032\uffd4\033\uffd4\035\uffd4\037" +
    "\uffd4\044\uffd4\045\uffd4\001\002\000\022\010\104\017\100" +
    "\032\072\033\074\035\076\037\073\044\105\045\067\001" +
    "\002\000\022\017\100\020\204\032\072\033\074\035\076" +
    "\037\073\044\105\045\126\001\002\000\026\017\uffd6\020" +
    "\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6" +
    "\044\uffd6\045\uffd6\001\002\000\022\017\uffd5\020\uffd5\032" +
    "\uffd5\033\uffd5\035\uffd5\037\uffd5\044\uffd5\045\uffd5\001\002" +
    "\000\022\017\100\020\207\032\072\033\074\035\076\037" +
    "\073\044\105\045\126\001\002\000\026\017\uffd7\020\uffd7" +
    "\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\042\uffd7\044" +
    "\uffd7\045\uffd7\001\002\000\012\015\114\030\112\045\110" +
    "\046\116\001\002\000\016\016\212\023\120\024\122\025" +
    "\117\026\121\027\123\001\002\000\020\017\100\032\072" +
    "\033\074\035\076\037\073\044\105\045\126\001\002\000" +
    "\026\017\uffae\020\uffae\032\uffae\033\uffae\035\uffae\036\215" +
    "\037\uffae\042\uffae\044\uffae\045\uffae\001\002\000\026\017" +
    "\uffb0\020\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\042\uffb0\044\uffb0\045\uffb0\001\002\000\020\017\100\032" +
    "\072\033\074\035\076\037\073\044\105\045\126\001\002" +
    "\000\026\017\uffaf\020\uffaf\032\uffaf\033\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\042\uffaf\044\uffaf\045\uffaf\001\002\000\012" +
    "\015\134\016\221\045\131\046\135\001\002\000\012\016" +
    "\223\023\137\024\141\031\140\001\002\000\004\006\222" +
    "\001\002\000\026\017\uffbe\020\uffbe\032\uffbe\033\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\042\uffbe\044\uffbe\045\uffbe\001\002" +
    "\000\004\006\224\001\002\000\026\017\uffbd\020\uffbd\032" +
    "\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\042\uffbd\044\uffbd" +
    "\045\uffbd\001\002\000\012\015\114\030\112\045\110\046" +
    "\116\001\002\000\016\016\227\023\120\024\122\025\117" +
    "\026\121\027\123\001\002\000\004\017\230\001\002\000" +
    "\004\040\233\001\002\000\010\020\uffa8\040\233\043\241" +
    "\001\002\000\010\020\uffab\040\uffab\043\uffab\001\002\000" +
    "\004\046\234\001\002\000\004\041\235\001\002\000\020" +
    "\017\100\032\072\033\074\035\076\037\073\044\105\045" +
    "\126\001\002\000\022\017\100\032\072\033\074\035\076" +
    "\037\073\042\237\044\105\045\126\001\002\000\004\041" +
    "\240\001\002\000\010\020\uffaa\040\uffaa\043\uffaa\001\002" +
    "\000\020\017\100\032\072\033\074\035\076\037\073\044" +
    "\105\045\126\001\002\000\010\020\uffac\040\uffac\043\uffac" +
    "\001\002\000\004\020\244\001\002\000\026\017\uffad\020" +
    "\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037\uffad\042\uffad" +
    "\044\uffad\045\uffad\001\002\000\022\017\100\032\072\033" +
    "\074\035\076\037\073\042\246\044\105\045\126\001\002" +
    "\000\004\041\247\001\002\000\004\020\uffa9\001\002\000" +
    "\006\016\252\047\251\001\002\000\004\016\254\001\002" +
    "\000\004\006\253\001\002\000\026\017\uffc0\020\uffc0\032" +
    "\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\042\uffc0\044\uffc0" +
    "\045\uffc0\001\002\000\004\006\255\001\002\000\026\017" +
    "\uffbf\020\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\042\uffbf\044\uffbf\045\uffbf\001\002\000\004\006\257\001" +
    "\002\000\024\010\ufff2\017\ufff2\021\ufff2\032\ufff2\033\ufff2" +
    "\035\ufff2\037\ufff2\044\ufff2\045\ufff2\001\002\000\006\010" +
    "\uffea\021\uffea\001\002\000\004\010\054\001\002\000\006" +
    "\013\uffe4\016\uffe4\001\002\000\006\006\uffee\013\264\001" +
    "\002\000\004\045\167\001\002\000\004\006\uffed\001\002" +
    "\000\004\006\uffef\001\002\000\004\002\ufffe\001\002\000" +
    "\004\015\277\001\002\000\004\015\272\001\002\000\004" +
    "\016\273\001\002\000\004\017\274\001\002\000\024\007" +
    "\021\010\ufff8\017\ufff8\032\ufff8\033\ufff8\035\ufff8\037\ufff8" +
    "\044\ufff8\045\ufff8\001\002\000\004\020\276\001\002\000" +
    "\004\002\uffe8\001\002\000\006\010\054\016\uffe6\001\002" +
    "\000\004\016\301\001\002\000\004\017\302\001\002\000" +
    "\024\007\021\010\ufff8\017\ufff8\032\ufff8\033\ufff8\035\ufff8" +
    "\037\ufff8\044\ufff8\045\ufff8\001\002\000\004\020\304\001" +
    "\002\000\006\010\uffe9\021\uffe9\001\002\000\004\002\uffec" +
    "\001\002\000\004\045\307\001\002\000\004\015\050\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\006\002\003\050\004\001\001\000\002\001" +
    "\001\000\010\003\006\004\005\010\007\001\001\000\006" +
    "\005\016\011\017\001\001\000\002\001\001\000\006\004" +
    "\015\010\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\040\007\034\013\033\015\035" +
    "\016\036\001\001\000\006\005\031\011\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\304\015\035\016\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\266\013" +
    "\176\015\035\016\036\001\001\000\004\014\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\265\001\001\000\002\001\001\000\010\017\051" +
    "\021\050\022\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\060\011\017\020\057\001" +
    "\001\000\002\001\001\000\034\006\100\013\033\023\063" +
    "\024\070\025\064\026\074\027\062\030\061\031\076\032" +
    "\102\033\065\040\067\043\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\024\177\025\064\026\074\027" +
    "\062\030\061\031\076\032\102\033\065\040\067\043\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\201" +
    "\013\033\024\200\025\064\026\074\027\062\030\061\031" +
    "\076\032\102\033\065\034\202\040\067\043\101\001\001" +
    "\000\032\013\176\023\175\024\070\025\064\026\074\027" +
    "\062\030\061\031\076\032\102\033\065\040\067\043\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\043\001\001\000\002\001\001\000\012\035\114\036\112" +
    "\037\110\040\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\163\036\112\037\110" +
    "\040\106\001\001\000\002\001\001\000\012\035\161\036" +
    "\112\037\110\040\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\035\160\036\112\037\110\040\106\001" +
    "\001\000\012\035\157\036\112\037\110\040\106\001\001" +
    "\000\012\035\156\036\112\037\110\040\106\001\001\000" +
    "\012\035\155\036\112\037\110\040\106\001\001\000\012" +
    "\035\154\036\112\037\110\040\106\001\001\000\026\024" +
    "\124\025\064\026\074\027\062\030\061\031\076\032\102" +
    "\033\065\040\067\043\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\037\132\040\127\041\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\037\132\040\127\041\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\132\040" +
    "\127\041\143\001\001\000\002\001\001\000\010\037\132" +
    "\040\127\041\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\035\147" +
    "\036\112\037\110\040\106\042\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\035\147\036\112\037\110\040\106\042\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\035" +
    "\173\036\112\037\110\040\106\001\001\000\012\035\171" +
    "\036\112\037\110\040\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\024\177\025\064\026\074\027\062\030\061\031\076\032" +
    "\102\033\065\040\067\043\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\013\176\024" +
    "\200\025\064\026\074\027\062\030\061\031\076\032\102" +
    "\033\065\034\205\040\067\043\101\001\001\000\026\024" +
    "\204\025\064\026\074\027\062\030\061\031\076\032\102" +
    "\033\065\040\067\043\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\024\204\025\064\026\074\027\062" +
    "\030\061\031\076\032\102\033\065\040\067\043\101\001" +
    "\001\000\002\001\001\000\012\035\210\036\112\037\110" +
    "\040\106\001\001\000\002\001\001\000\026\024\212\025" +
    "\064\026\074\027\062\030\061\031\076\032\102\033\065" +
    "\040\067\043\101\001\001\000\004\044\213\001\001\000" +
    "\002\001\001\000\026\024\215\025\064\026\074\027\062" +
    "\030\061\031\076\032\102\033\065\040\067\043\101\001" +
    "\001\000\002\001\001\000\010\037\132\040\127\041\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\035\225" +
    "\036\112\037\110\040\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\230\047\231\001\001\000\006" +
    "\046\242\047\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\023\235\024\070\025\064" +
    "\026\074\027\062\030\061\031\076\032\102\033\065\040" +
    "\067\043\101\001\001\000\026\024\177\025\064\026\074" +
    "\027\062\030\061\031\076\032\102\033\065\040\067\043" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\023\244\024\070\025\064\026\074\027\062\030\061\031" +
    "\076\032\102\033\065\040\067\043\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\024" +
    "\177\025\064\026\074\027\062\030\061\031\076\032\102" +
    "\033\065\040\067\043\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\060" +
    "\011\017\020\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\277\021\050\022\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\060\011\017\020" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaMientras ::= MIENTRAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // defectoAlternativa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defectoAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // defectoAlternativa ::= PORDEFECTO sentencias CORTE DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defectoAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // casoAlternativa ::= CASO INT DOS_PUNTOS sentencias CORTE DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlternativa",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // casosAlternativa ::= casoAlternativa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // casosAlternativa ::= casosAlternativa casoAlternativa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaAlternativas ::= ALTERNATIVAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR LLAVE_ABRIR casosAlternativa defectoAlternativa LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parteElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parteElse ::= SINO sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaSi ::= SI PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia parteElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // referencia ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // referencia ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaAsignacion ::= referencia ASIGNACION_SUMA expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaAsignacion ::= referencia ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionAritmetica ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionAritmetica ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionAritmetica ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionAritmetica ::= llamadaProcedimientos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionAritmetica ::= PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionAritmetica ::= expresionAritmetica AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionAritmetica ::= expresionAritmetica PRODUCTO expresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresionAritmetica ::= expresionAritmetica SUMA expresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaSalida ::= ESCRIBE_ENT PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaSalida ::= ESCRIBE_ENT PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaSalida ::= ESCRIBE PARENTESIS_ABRIR STRING PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaSalida ::= ESCRIBE PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros ::= expresion COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamadaProcedimientos ::= ID PARENTESIS_ABRIR PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimientos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamadaProcedimientos ::= ID PARENTESIS_ABRIR parametros PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimientos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionVector ::= ID CORCHETE_ABRIR expresionAritmetica CORCHETE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionVector",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionAutoincremento ::= expresionVector AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAutoincremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresionAutoincremento ::= ID AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAutoincremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= llamadaProcedimientos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= PARENTESIS_ABRIR expresion PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion CONJUNCION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresionAutoincremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion PRODUCTO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion SUMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaBloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaBloque ::= sentenciaBloque sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloqueSentencia ::= LLAVE_ABRIR sentenciaBloque LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloqueSentencia ::= LLAVE_ABRIR declaracionVariables sentenciaBloque LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= bloqueSentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= sentenciaMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= sentenciaAlternativas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= sentenciaSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= sentenciaSalida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloqueFuncion ::= declaracionTipos sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFuncion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloqueFuncion ::= declaracionTipos declaracionVariables sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFuncion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionParametro ::= ENTERO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaParametros ::= listaParametros COMA declaracionParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaParametros ::= declaracionParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametrosFormales ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosFormales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametrosFormales ::= listaParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosFormales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcionPrincipal ::= VACIO PRINCIPAL PARENTESIS_ABRIR PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionSubprograma ::= VACIO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionSubprograma ::= ENTERO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionSubprogramas ::= funcionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIds ::= ID ASIGNACION INT COMA listadoIds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listadoIds ::= ID ASIGNACION INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listadoIds ::= ID COMA listadoIds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listadoIds ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionVariable ::= ENTERO listadoIds PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionVariable ::= ID listadoIds PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVariables ::= declaracionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tamanhoTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamanhoTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tamanhoTipo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamanhoTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionTipo ::= TIPO ENTERO ID CORCHETE_ABRIR tamanhoTipo CORCHETE_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionTipos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracionConstante ::= ALMOHADILLA CONSTANTE ID INT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionConstantes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= declaracionConstantes declaracionTipos declaracionSubprogramas 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= declaracionConstantes declaracionTipos declaracionVariables declaracionSubprogramas 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

