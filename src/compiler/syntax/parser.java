
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 11 01:19:57 CET 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 11 01:19:57 CET 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\051\002\000\002\002" +
    "\004\000\002\003\006\000\002\003\005\000\002\004\004" +
    "\000\002\004\002\000\002\010\007\000\002\005\004\000" +
    "\002\005\002\000\002\011\011\000\002\012\003\000\002" +
    "\012\003\000\002\006\004\000\002\006\003\000\002\013" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\007\000\002\007\004\000" +
    "\002\007\003\000\002\015\012\000\002\015\012\000\002" +
    "\016\011\000\002\017\003\000\002\017\002\000\002\021" +
    "\003\000\002\021\005\000\002\022\004\000\002\020\005" +
    "\000\002\020\004\000\002\023\004\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\033\006\000\002\033\005" +
    "\000\002\034\004\000\002\034\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\003\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\004\000\002\035" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\004\000\002\036\004\000" +
    "\002\040\006\000\002\037\006\000\002\037\005\000\002" +
    "\042\003\000\002\042\005\000\002\026\006\000\002\026" +
    "\007\000\002\026\006\000\002\026\007\000\002\041\005" +
    "\000\002\041\005\000\002\041\004\000\002\041\005\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\025\006\000\002\025\006\000\002\025" +
    "\005\000\002\043\003\000\002\043\003\000\002\027\010" +
    "\000\002\044\004\000\002\044\002\000\002\030\012\000" +
    "\002\045\004\000\002\045\003\000\002\047\010\000\002" +
    "\046\006\000\002\046\002\000\002\032\007\000\002\050" +
    "\004\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\014\004\000\007\000\010\000\021\000\046" +
    "\000\001\002\000\004\002\317\001\002\000\014\004\011" +
    "\007\ufffb\010\ufffb\021\ufffb\046\ufffb\001\002\000\012\007" +
    "\021\010\ufff8\021\ufff8\046\ufff8\001\002\000\004\002\uffff" +
    "\001\002\000\014\004\011\007\ufffb\010\ufffb\021\ufffb\046" +
    "\ufffb\001\002\000\004\005\012\001\002\000\004\046\013" +
    "\001\002\000\004\047\014\001\002\000\004\006\015\001" +
    "\002\000\014\004\ufffa\007\ufffa\010\ufffa\021\ufffa\046\ufffa" +
    "\001\002\000\012\007\ufffc\010\ufffc\021\ufffc\046\ufffc\001" +
    "\002\000\010\010\042\021\040\046\033\001\002\000\030" +
    "\007\021\010\ufff8\017\ufff8\021\ufff8\032\ufff8\033\ufff8\035" +
    "\ufff8\037\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002\000\004" +
    "\010\022\001\002\000\004\046\023\001\002\000\004\011" +
    "\024\001\002\000\006\046\025\047\027\001\002\000\004" +
    "\012\ufff6\001\002\000\004\012\030\001\002\000\004\012" +
    "\ufff5\001\002\000\004\006\031\001\002\000\030\007\ufff7" +
    "\010\ufff7\017\ufff7\021\ufff7\032\ufff7\033\ufff7\035\ufff7\037" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\001\002\000\026\010\ufff9" +
    "\017\ufff9\021\ufff9\032\ufff9\033\ufff9\035\ufff9\037\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\001\002\000\004\046\171\001\002" +
    "\000\026\010\ufff3\017\ufff3\021\ufff3\032\ufff3\033\ufff3\035" +
    "\ufff3\037\ufff3\044\ufff3\045\ufff3\046\ufff3\001\002\000\004" +
    "\002\ufffd\001\002\000\006\010\315\021\040\001\002\000" +
    "\004\002\uffeb\001\002\000\006\022\300\046\277\001\002" +
    "\000\010\010\042\021\040\046\033\001\002\000\004\046" +
    "\043\001\002\000\012\006\ufff0\013\046\014\047\015\050" +
    "\001\002\000\004\006\045\001\002\000\026\010\ufff1\017" +
    "\ufff1\021\ufff1\032\ufff1\033\ufff1\035\ufff1\037\ufff1\044\ufff1" +
    "\045\ufff1\046\ufff1\001\002\000\004\046\171\001\002\000" +
    "\004\047\272\001\002\000\006\010\054\016\uffe6\001\002" +
    "\000\006\013\270\016\uffe7\001\002\000\004\016\056\001" +
    "\002\000\006\013\uffe5\016\uffe5\001\002\000\004\046\055" +
    "\001\002\000\006\013\uffe3\016\uffe3\001\002\000\004\017" +
    "\057\001\002\000\026\007\021\010\ufff8\017\ufff8\032\ufff8" +
    "\033\ufff8\035\ufff8\037\ufff8\044\ufff8\045\ufff8\046\ufff8\001" +
    "\002\000\004\020\267\001\002\000\024\010\105\017\101" +
    "\032\073\033\075\035\077\037\074\044\106\045\064\046" +
    "\070\001\002\000\030\017\uffdb\020\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\042\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\001\002\000\030\017\uffdc\020\uffdc\032\uffdc\033\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\042\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\001\002\000\012\006\265\015\136\046\133\047\137" +
    "\001\002\000\024\017\101\020\uffe1\032\073\033\075\035" +
    "\077\037\074\044\106\045\064\046\127\001\002\000\030" +
    "\017\uffde\020\uffde\032\uffde\033\uffde\035\uffde\036\uffde\037" +
    "\uffde\042\uffde\044\uffde\045\uffde\046\uffde\001\002\000\030" +
    "\017\uffd7\020\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\001\002\000\014" +
    "\011\131\014\uffb0\031\uffb0\034\uffb0\046\171\001\002\000" +
    "\010\014\uffaf\031\uffaf\034\uffaf\001\002\000\026\017\uffdf" +
    "\020\uffdf\032\uffdf\033\uffdf\035\uffdf\037\uffdf\042\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\001\002\000\004\015\254\001\002" +
    "\000\004\015\231\001\002\000\004\015\223\001\002\000" +
    "\030\017\uffdd\020\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd\001\002\000" +
    "\004\015\214\001\002\000\030\017\uffda\020\uffda\032\uffda" +
    "\033\uffda\035\uffda\036\uffda\037\uffda\042\uffda\044\uffda\045" +
    "\uffda\046\uffda\001\002\000\024\010\105\017\101\032\073" +
    "\033\075\035\077\037\074\044\106\045\064\046\070\001" +
    "\002\000\024\010\105\017\101\032\073\033\075\035\077" +
    "\037\074\044\106\045\064\046\070\001\002\000\010\014" +
    "\172\031\173\034\174\001\002\000\030\017\uffd9\020\uffd9" +
    "\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\001\002\000\004\046\171\001\002" +
    "\000\004\015\110\001\002\000\030\017\uffd8\020\uffd8\032" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\042\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\001\002\000\012\015\116\030\114\046" +
    "\112\047\117\001\002\000\024\006\uffc9\013\uffc9\016\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\170\001" +
    "\002\000\030\006\uffc8\011\131\013\uffc8\015\150\016\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\167\001" +
    "\002\000\022\006\uffca\013\uffca\016\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\001\002\000\012\015\116\030" +
    "\114\046\112\047\117\001\002\000\022\006\uffd0\013\uffd0" +
    "\016\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\001" +
    "\002\000\012\015\116\030\114\046\112\047\117\001\002" +
    "\000\022\006\uffc7\013\uffc7\016\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\001\002\000\016\016\126\023\122" +
    "\024\125\025\121\026\123\027\124\001\002\000\012\015" +
    "\116\030\114\046\112\047\117\001\002\000\012\015\116" +
    "\030\114\046\112\047\117\001\002\000\012\015\116\030" +
    "\114\046\112\047\117\001\002\000\012\015\116\030\114" +
    "\046\112\047\117\001\002\000\012\015\116\030\114\046" +
    "\112\047\117\001\002\000\022\017\101\032\073\033\075" +
    "\035\077\037\074\044\106\045\064\046\127\001\002\000" +
    "\012\011\131\014\uffb0\031\uffb0\034\uffb0\001\002\000\030" +
    "\017\uffa5\020\uffa5\032\uffa5\033\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\001\002\000\010" +
    "\015\136\046\133\047\137\001\002\000\016\006\uffb6\012" +
    "\uffb6\016\uffb6\023\uffb6\024\uffb6\031\uffb6\001\002\000\022" +
    "\006\uffb5\011\131\012\uffb5\015\150\016\uffb5\023\uffb5\024" +
    "\uffb5\031\uffb5\001\002\000\012\012\147\023\142\024\143" +
    "\031\141\001\002\000\016\006\uffb7\012\uffb7\016\uffb7\023" +
    "\uffb7\024\uffb7\031\uffb7\001\002\000\010\015\136\046\133" +
    "\047\137\001\002\000\016\006\uffb4\012\uffb4\016\uffb4\023" +
    "\uffb4\024\uffb4\031\uffb4\001\002\000\012\016\144\023\142" +
    "\024\143\031\141\001\002\000\016\006\uffb9\012\uffb9\016" +
    "\uffb9\023\uffb9\024\uffb9\031\uffb9\001\002\000\010\015\136" +
    "\046\133\047\137\001\002\000\010\015\136\046\133\047" +
    "\137\001\002\000\016\006\uffb8\012\uffb8\016\uffb8\023\uffb8" +
    "\024\uffb8\031\uffb8\001\002\000\016\006\uffba\012\uffba\016" +
    "\uffba\023\142\024\uffba\031\uffba\001\002\000\016\006\uffbb" +
    "\012\uffbb\016\uffbb\023\uffbb\024\uffbb\031\uffbb\001\002\000" +
    "\032\006\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\034\uffc4\001" +
    "\002\000\014\015\116\016\151\030\114\046\112\047\117" +
    "\001\002\000\026\006\uffc2\012\uffc2\013\uffc2\016\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\001\002" +
    "\000\020\013\155\016\uffc1\023\122\024\125\025\121\026" +
    "\123\027\124\001\002\000\004\016\154\001\002\000\026" +
    "\006\uffc3\012\uffc3\013\uffc3\016\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\031\uffc3\001\002\000\012\015\116" +
    "\030\114\046\112\047\117\001\002\000\004\016\uffc0\001" +
    "\002\000\022\006\uffd1\013\uffd1\016\uffd1\023\122\024\uffd1" +
    "\025\121\026\123\027\124\001\002\000\022\006\uffcd\013" +
    "\uffcd\016\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\001\002\000\022\006\uffce\013\uffce\016\uffce\023\uffce\024" +
    "\uffce\025\121\026\uffce\027\124\001\002\000\022\006\uffd2" +
    "\013\uffd2\016\uffd2\023\uffd2\024\uffd2\025\121\026\123\027" +
    "\124\001\002\000\022\006\uffcf\013\uffcf\016\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\124\001\002\000\016\016" +
    "\165\023\122\024\125\025\121\026\123\027\124\001\002" +
    "\000\022\006\uffcb\013\uffcb\016\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\001\002\000\022\006\uffcc\013\uffcc" +
    "\016\uffcc\023\122\024\125\025\121\026\123\027\124\001" +
    "\002\000\022\006\uffc6\013\uffc6\016\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\001\002\000\022\006\uffc5\013" +
    "\uffc5\016\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\001\002\000\010\006\ufff0\013\046\014\047\001\002\000" +
    "\012\015\116\030\114\046\112\047\117\001\002\000\004" +
    "\006\177\001\002\000\012\015\116\030\114\046\112\047" +
    "\117\001\002\000\016\006\176\023\122\024\125\025\121" +
    "\026\123\027\124\001\002\000\030\017\uffb2\020\uffb2\032" +
    "\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\042\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\001\002\000\030\017\uffb1\020\uffb1\032" +
    "\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\042\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\001\002\000\016\006\201\023\122\024" +
    "\125\025\121\026\123\027\124\001\002\000\030\017\uffb3" +
    "\020\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\042" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002\000\024\017\101" +
    "\020\uffe2\032\073\033\075\035\077\037\074\044\106\045" +
    "\064\046\127\001\002\000\026\010\ufff4\017\ufff4\021\ufff4" +
    "\032\ufff4\033\ufff4\035\ufff4\037\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\001\002\000\026\017\uffe0\020\uffe0\032\uffe0\033\uffe0" +
    "\035\uffe0\037\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0\001" +
    "\002\000\024\017\uffd3\020\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\037\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002\000\024\010" +
    "\105\017\101\032\073\033\075\035\077\037\074\044\106" +
    "\045\064\046\070\001\002\000\024\017\101\020\210\032" +
    "\073\033\075\035\077\037\074\044\106\045\064\046\127" +
    "\001\002\000\030\017\uffd5\020\uffd5\032\uffd5\033\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\001\002\000\024\017\uffd4\020\uffd4\032\uffd4\033\uffd4\035" +
    "\uffd4\037\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002\000\024" +
    "\017\101\020\213\032\073\033\075\035\077\037\074\044" +
    "\106\045\064\046\127\001\002\000\030\017\uffd6\020\uffd6" +
    "\032\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\001\002\000\012\015\116\030\114" +
    "\046\112\047\117\001\002\000\016\016\216\023\122\024" +
    "\125\025\121\026\123\027\124\001\002\000\022\017\101" +
    "\032\073\033\075\035\077\037\074\044\106\045\064\046" +
    "\127\001\002\000\030\017\uffac\020\uffac\032\uffac\033\uffac" +
    "\035\uffac\036\221\037\uffac\042\uffac\044\uffac\045\uffac\046" +
    "\uffac\001\002\000\030\017\uffae\020\uffae\032\uffae\033\uffae" +
    "\035\uffae\036\uffae\037\uffae\042\uffae\044\uffae\045\uffae\046" +
    "\uffae\001\002\000\022\017\101\032\073\033\075\035\077" +
    "\037\074\044\106\045\064\046\127\001\002\000\030\017" +
    "\uffad\020\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037\uffad" +
    "\042\uffad\044\uffad\045\uffad\046\uffad\001\002\000\012\015" +
    "\136\016\225\046\133\047\137\001\002\000\012\016\227" +
    "\023\142\024\143\031\141\001\002\000\004\006\226\001" +
    "\002\000\030\017\uffbd\020\uffbd\032\uffbd\033\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\001" +
    "\002\000\004\006\230\001\002\000\030\017\uffbc\020\uffbc" +
    "\032\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\042\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\001\002\000\012\015\116\030\114" +
    "\046\112\047\117\001\002\000\016\016\233\023\122\024" +
    "\125\025\121\026\123\027\124\001\002\000\004\017\234" +
    "\001\002\000\004\040\237\001\002\000\010\020\uffa6\040" +
    "\237\043\245\001\002\000\010\020\uffa9\040\uffa9\043\uffa9" +
    "\001\002\000\004\047\240\001\002\000\004\041\241\001" +
    "\002\000\022\017\101\032\073\033\075\035\077\037\074" +
    "\044\106\045\064\046\127\001\002\000\024\017\101\032" +
    "\073\033\075\035\077\037\074\042\243\044\106\045\064" +
    "\046\127\001\002\000\004\041\244\001\002\000\010\020" +
    "\uffa8\040\uffa8\043\uffa8\001\002\000\022\017\101\032\073" +
    "\033\075\035\077\037\074\044\106\045\064\046\127\001" +
    "\002\000\010\020\uffaa\040\uffaa\043\uffaa\001\002\000\004" +
    "\020\250\001\002\000\030\017\uffab\020\uffab\032\uffab\033" +
    "\uffab\035\uffab\036\uffab\037\uffab\042\uffab\044\uffab\045\uffab" +
    "\046\uffab\001\002\000\024\017\101\032\073\033\075\035" +
    "\077\037\074\042\252\044\106\045\064\046\127\001\002" +
    "\000\004\041\253\001\002\000\004\020\uffa7\001\002\000" +
    "\006\016\256\050\255\001\002\000\004\016\260\001\002" +
    "\000\004\006\257\001\002\000\030\017\uffbf\020\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\001\002\000\004\006\261\001\002\000" +
    "\030\017\uffbe\020\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe\001\002\000" +
    "\004\006\263\001\002\000\026\010\ufff2\017\ufff2\021\ufff2" +
    "\032\ufff2\033\ufff2\035\ufff2\037\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\001\002\000\012\006\266\023\142\024\143\031\141" +
    "\001\002\000\030\017\uffa4\020\uffa4\032\uffa4\033\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\001\002\000\030\017\uffa3\020\uffa3\032\uffa3\033\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\042\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\001\002\000\006\010\uffea\021\uffea\001\002\000\004\010" +
    "\054\001\002\000\006\013\uffe4\016\uffe4\001\002\000\006" +
    "\006\uffee\013\273\001\002\000\004\046\171\001\002\000" +
    "\004\006\uffed\001\002\000\004\006\uffef\001\002\000\004" +
    "\002\ufffe\001\002\000\004\015\306\001\002\000\004\015" +
    "\301\001\002\000\004\016\302\001\002\000\004\017\303" +
    "\001\002\000\026\007\021\010\ufff8\017\ufff8\032\ufff8\033" +
    "\ufff8\035\ufff8\037\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002" +
    "\000\004\020\305\001\002\000\004\002\uffe8\001\002\000" +
    "\006\010\054\016\uffe6\001\002\000\004\016\310\001\002" +
    "\000\004\017\311\001\002\000\026\007\021\010\ufff8\017" +
    "\ufff8\032\ufff8\033\ufff8\035\ufff8\037\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\001\002\000\004\020\313\001\002\000\006\010" +
    "\uffe9\021\uffe9\001\002\000\004\002\uffec\001\002\000\004" +
    "\046\316\001\002\000\004\015\050\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\006\002\003\051\004\001\001\000\002\001" +
    "\001\000\010\003\006\004\005\010\007\001\001\000\006" +
    "\005\016\011\017\001\001\000\002\001\001\000\006\004" +
    "\015\010\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\040\007\034\013\033\015\035" +
    "\016\036\001\001\000\006\005\031\011\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\313\015\035\016\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\275\013" +
    "\202\015\035\016\036\001\001\000\004\014\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\274\001\001\000\002\001\001\000\010\017\051" +
    "\021\050\022\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\060\011\017\020\057\001" +
    "\001\000\002\001\001\000\036\006\101\013\033\023\064" +
    "\024\071\025\065\026\075\027\062\030\061\031\077\032" +
    "\103\033\066\040\070\043\102\050\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\037\134\040\131\041" +
    "\263\001\001\000\030\024\203\025\065\026\075\027\062" +
    "\030\061\031\077\032\103\033\066\040\070\043\102\050" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\205\013\033\024\204\025\065\026\075\027\062\030\061" +
    "\031\077\032\103\033\066\034\206\040\070\043\102\050" +
    "\106\001\001\000\034\013\202\023\201\024\071\025\065" +
    "\026\075\027\062\030\061\031\077\032\103\033\066\040" +
    "\070\043\102\050\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\117\036\114\037\112\040\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\165\036\114\037\112\040\110\001\001" +
    "\000\002\001\001\000\012\035\163\036\114\037\112\040" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\035\162\036\114\037\112\040\110\001\001\000\012\035" +
    "\161\036\114\037\112\040\110\001\001\000\012\035\160" +
    "\036\114\037\112\040\110\001\001\000\012\035\157\036" +
    "\114\037\112\040\110\001\001\000\012\035\156\036\114" +
    "\037\112\040\110\001\001\000\030\024\127\025\065\026" +
    "\075\027\062\030\061\031\077\032\103\033\066\040\070" +
    "\043\102\050\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\134\040\131\041\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\134\040\131\041\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\037" +
    "\134\040\131\041\145\001\001\000\010\037\134\040\131" +
    "\041\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\035\151\036\114" +
    "\037\112\040\110\042\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\035\151\036\114\037\112\040\110\042\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\035\177\036" +
    "\114\037\112\040\110\001\001\000\002\001\001\000\012" +
    "\035\174\036\114\037\112\040\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\024\203\025\065\026\075\027" +
    "\062\030\061\031\077\032\103\033\066\040\070\043\102" +
    "\050\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\013\202\024\204\025\065\026\075" +
    "\027\062\030\061\031\077\032\103\033\066\034\211\040" +
    "\070\043\102\050\106\001\001\000\030\024\210\025\065" +
    "\026\075\027\062\030\061\031\077\032\103\033\066\040" +
    "\070\043\102\050\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\024\210\025\065\026\075\027\062\030" +
    "\061\031\077\032\103\033\066\040\070\043\102\050\106" +
    "\001\001\000\002\001\001\000\012\035\214\036\114\037" +
    "\112\040\110\001\001\000\002\001\001\000\030\024\216" +
    "\025\065\026\075\027\062\030\061\031\077\032\103\033" +
    "\066\040\070\043\102\050\106\001\001\000\004\044\217" +
    "\001\001\000\002\001\001\000\030\024\221\025\065\026" +
    "\075\027\062\030\061\031\077\032\103\033\066\040\070" +
    "\043\102\050\106\001\001\000\002\001\001\000\010\037" +
    "\134\040\131\041\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\231\036\114\037\112\040\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\234\047" +
    "\235\001\001\000\006\046\246\047\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\023" +
    "\241\024\071\025\065\026\075\027\062\030\061\031\077" +
    "\032\103\033\066\040\070\043\102\050\106\001\001\000" +
    "\030\024\203\025\065\026\075\027\062\030\061\031\077" +
    "\032\103\033\066\040\070\043\102\050\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\023\250\024\071" +
    "\025\065\026\075\027\062\030\061\031\077\032\103\033" +
    "\066\040\070\043\102\050\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\024\203\025" +
    "\065\026\075\027\062\030\061\031\077\032\103\033\066" +
    "\040\070\043\102\050\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\060\011" +
    "\017\020\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\306\021\050\022\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\060\011\017\020\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciaDevuelve ::= DEVUELVE expresionAritmetica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaDevuelve ::= DEVUELVE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciaMientras ::= MIENTRAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // defectoAlternativa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defectoAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // defectoAlternativa ::= PORDEFECTO sentencias CORTE DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defectoAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // casoAlternativa ::= CASO INT DOS_PUNTOS sentencias CORTE DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlternativa",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // casosAlternativa ::= casoAlternativa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // casosAlternativa ::= casosAlternativa casoAlternativa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaAlternativas ::= ALTERNATIVAS PARENTESIS_ABRIR expresion PARENTESIS_CERRAR LLAVE_ABRIR casosAlternativa defectoAlternativa LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parteElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parteElse ::= SINO sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaSi ::= SI PARENTESIS_ABRIR expresion PARENTESIS_CERRAR sentencia parteElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // referencia ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // referencia ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaAsignacion ::= referencia AUTOINCREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaAsignacion ::= referencia ASIGNACION_SUMA expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaAsignacion ::= referencia ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionAritmetica ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionAritmetica ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionAritmetica ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionAritmetica ::= llamadaProcedimientos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionAritmetica ::= PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionAritmetica ::= expresionAritmetica AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionAritmetica ::= expresionAritmetica PRODUCTO expresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionAritmetica ::= expresionAritmetica SUMA expresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaSalida ::= ESCRIBE_ENT PARENTESIS_ABRIR expresionAritmetica PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaSalida ::= ESCRIBE_ENT PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaSalida ::= ESCRIBE PARENTESIS_ABRIR STRING PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaSalida ::= ESCRIBE PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros ::= expresion COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // llamadaProcedimientos ::= ID PARENTESIS_ABRIR PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimientos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamadaProcedimientos ::= ID PARENTESIS_ABRIR parametros PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimientos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresionVector ::= ID CORCHETE_ABRIR expresionAritmetica CORCHETE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionVector",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionAutoincremento ::= expresionVector AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAutoincremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionAutoincremento ::= ID AUTOINCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAutoincremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresionVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= llamadaProcedimientos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= PARENTESIS_ABRIR expresion PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion CONJUNCION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresionAutoincremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion PRODUCTO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion SUMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaBloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaBloque ::= sentenciaBloque sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloqueSentencia ::= LLAVE_ABRIR sentenciaBloque LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloqueSentencia ::= LLAVE_ABRIR declaracionVariables sentenciaBloque LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= bloqueSentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= sentenciaDevuelve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= sentenciaMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= sentenciaAlternativas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= sentenciaSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= sentenciaSalida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloqueFuncion ::= declaracionTipos sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFuncion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloqueFuncion ::= declaracionTipos declaracionVariables sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFuncion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionParametro ::= ENTERO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaParametros ::= listaParametros COMA declaracionParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaParametros ::= declaracionParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametrosFormales ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosFormales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametrosFormales ::= listaParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosFormales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcionPrincipal ::= VACIO PRINCIPAL PARENTESIS_ABRIR PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionSubprograma ::= VACIO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionSubprograma ::= ENTERO ID PARENTESIS_ABRIR parametrosFormales PARENTESIS_CERRAR LLAVE_ABRIR bloqueFuncion LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionSubprogramas ::= funcionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIds ::= ID ASIGNACION INT COMA listadoIds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listadoIds ::= ID ASIGNACION INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listadoIds ::= ID COMA listadoIds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listadoIds ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIds",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionVariable ::= ENTERO listadoIds PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionVariable ::= ID listadoIds PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVariables ::= declaracionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tamanhoTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamanhoTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tamanhoTipo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamanhoTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionTipo ::= TIPO ENTERO ID CORCHETE_ABRIR tamanhoTipo CORCHETE_CERRAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionTipos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracionConstante ::= ALMOHADILLA CONSTANTE ID INT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionConstantes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= declaracionConstantes declaracionTipos declaracionSubprogramas 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= declaracionConstantes declaracionTipos declaracionVariables declaracionSubprogramas 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

